// Code generated by protoc-gen-go. DO NOT EDIT.
// source: apache/rocketmq/v1/service.proto

package apache_rocketmq_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	errdetails "google.golang.org/genproto/googleapis/rpc/errdetails"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EndTransactionRequest_TransactionResolution int32

const (
	EndTransactionRequest_COMMIT   EndTransactionRequest_TransactionResolution = 0
	EndTransactionRequest_ROLLBACK EndTransactionRequest_TransactionResolution = 1
)

var EndTransactionRequest_TransactionResolution_name = map[int32]string{
	0: "COMMIT",
	1: "ROLLBACK",
}

var EndTransactionRequest_TransactionResolution_value = map[string]int32{
	"COMMIT":   0,
	"ROLLBACK": 1,
}

func (x EndTransactionRequest_TransactionResolution) String() string {
	return proto.EnumName(EndTransactionRequest_TransactionResolution_name, int32(x))
}

func (EndTransactionRequest_TransactionResolution) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{19, 0}
}

type EndTransactionRequest_Source int32

const (
	EndTransactionRequest_CLIENT       EndTransactionRequest_Source = 0
	EndTransactionRequest_SERVER_CHECK EndTransactionRequest_Source = 1
)

var EndTransactionRequest_Source_name = map[int32]string{
	0: "CLIENT",
	1: "SERVER_CHECK",
}

var EndTransactionRequest_Source_value = map[string]int32{
	"CLIENT":       0,
	"SERVER_CHECK": 1,
}

func (x EndTransactionRequest_Source) String() string {
	return proto.EnumName(EndTransactionRequest_Source_name, int32(x))
}

func (EndTransactionRequest_Source) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{19, 1}
}

type ResponseCommon struct {
	Status               *status.Status          `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RequestInfo          *errdetails.RequestInfo `protobuf:"bytes,2,opt,name=request_info,json=requestInfo,proto3" json:"request_info,omitempty"`
	Help                 *errdetails.Help        `protobuf:"bytes,3,opt,name=help,proto3" json:"help,omitempty"`
	RetryInfo            *errdetails.RetryInfo   `protobuf:"bytes,4,opt,name=retry_info,json=retryInfo,proto3" json:"retry_info,omitempty"`
	DebugInfo            *errdetails.DebugInfo   `protobuf:"bytes,5,opt,name=debug_info,json=debugInfo,proto3" json:"debug_info,omitempty"`
	ErrorInfo            *errdetails.ErrorInfo   `protobuf:"bytes,6,opt,name=error_info,json=errorInfo,proto3" json:"error_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ResponseCommon) Reset()         { *m = ResponseCommon{} }
func (m *ResponseCommon) String() string { return proto.CompactTextString(m) }
func (*ResponseCommon) ProtoMessage()    {}
func (*ResponseCommon) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{0}
}

func (m *ResponseCommon) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseCommon.Unmarshal(m, b)
}
func (m *ResponseCommon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseCommon.Marshal(b, m, deterministic)
}
func (m *ResponseCommon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseCommon.Merge(m, src)
}
func (m *ResponseCommon) XXX_Size() int {
	return xxx_messageInfo_ResponseCommon.Size(m)
}
func (m *ResponseCommon) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseCommon.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseCommon proto.InternalMessageInfo

func (m *ResponseCommon) GetStatus() *status.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ResponseCommon) GetRequestInfo() *errdetails.RequestInfo {
	if m != nil {
		return m.RequestInfo
	}
	return nil
}

func (m *ResponseCommon) GetHelp() *errdetails.Help {
	if m != nil {
		return m.Help
	}
	return nil
}

func (m *ResponseCommon) GetRetryInfo() *errdetails.RetryInfo {
	if m != nil {
		return m.RetryInfo
	}
	return nil
}

func (m *ResponseCommon) GetDebugInfo() *errdetails.DebugInfo {
	if m != nil {
		return m.DebugInfo
	}
	return nil
}

func (m *ResponseCommon) GetErrorInfo() *errdetails.ErrorInfo {
	if m != nil {
		return m.ErrorInfo
	}
	return nil
}

// Topics are destination of messages to publish to or subscribe from. Similar
// to domain names, they will be addressable after resolution through the
// provided access point.
//
// Access points are usually the addresses of name servers, which fulfill
// service discovery, load-balancing and other auxillary services. Name servers
// receive periodic heartbeats from affiliate brokers and erase those which
// failed to maintain alive status.
//
// Name servers answer queries of QueryRouteRequest, responding clients with
// addressable partitions, which they may directly publish messages to or
// subscribe messages from.
//
// QueryRouteRequest shall include source endpoints, aka, configured
// access-point, which annotates tenant-id, instance-id or other
// vendor-specific settings. Purpose-built name servers may respond customized
// results based on these particular requirements.
type QueryRouteRequest struct {
	Topic                *Resource  `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Endpoints            *Endpoints `protobuf:"bytes,2,opt,name=endpoints,proto3" json:"endpoints,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *QueryRouteRequest) Reset()         { *m = QueryRouteRequest{} }
func (m *QueryRouteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRouteRequest) ProtoMessage()    {}
func (*QueryRouteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{1}
}

func (m *QueryRouteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryRouteRequest.Unmarshal(m, b)
}
func (m *QueryRouteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryRouteRequest.Marshal(b, m, deterministic)
}
func (m *QueryRouteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRouteRequest.Merge(m, src)
}
func (m *QueryRouteRequest) XXX_Size() int {
	return xxx_messageInfo_QueryRouteRequest.Size(m)
}
func (m *QueryRouteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRouteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRouteRequest proto.InternalMessageInfo

func (m *QueryRouteRequest) GetTopic() *Resource {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *QueryRouteRequest) GetEndpoints() *Endpoints {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

type QueryRouteResponse struct {
	Common               *ResponseCommon `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Partitions           []*Partition    `protobuf:"bytes,2,rep,name=partitions,proto3" json:"partitions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *QueryRouteResponse) Reset()         { *m = QueryRouteResponse{} }
func (m *QueryRouteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRouteResponse) ProtoMessage()    {}
func (*QueryRouteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{2}
}

func (m *QueryRouteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryRouteResponse.Unmarshal(m, b)
}
func (m *QueryRouteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryRouteResponse.Marshal(b, m, deterministic)
}
func (m *QueryRouteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRouteResponse.Merge(m, src)
}
func (m *QueryRouteResponse) XXX_Size() int {
	return xxx_messageInfo_QueryRouteResponse.Size(m)
}
func (m *QueryRouteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRouteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRouteResponse proto.InternalMessageInfo

func (m *QueryRouteResponse) GetCommon() *ResponseCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *QueryRouteResponse) GetPartitions() []*Partition {
	if m != nil {
		return m.Partitions
	}
	return nil
}

type SendMessageRequest struct {
	Message              *Message   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Partition            *Partition `protobuf:"bytes,2,opt,name=partition,proto3" json:"partition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SendMessageRequest) Reset()         { *m = SendMessageRequest{} }
func (m *SendMessageRequest) String() string { return proto.CompactTextString(m) }
func (*SendMessageRequest) ProtoMessage()    {}
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{3}
}

func (m *SendMessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendMessageRequest.Unmarshal(m, b)
}
func (m *SendMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendMessageRequest.Marshal(b, m, deterministic)
}
func (m *SendMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMessageRequest.Merge(m, src)
}
func (m *SendMessageRequest) XXX_Size() int {
	return xxx_messageInfo_SendMessageRequest.Size(m)
}
func (m *SendMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendMessageRequest proto.InternalMessageInfo

func (m *SendMessageRequest) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SendMessageRequest) GetPartition() *Partition {
	if m != nil {
		return m.Partition
	}
	return nil
}

type SendMessageResponse struct {
	Common               *ResponseCommon `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	MessageId            string          `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	TransactionId        string          `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SendMessageResponse) Reset()         { *m = SendMessageResponse{} }
func (m *SendMessageResponse) String() string { return proto.CompactTextString(m) }
func (*SendMessageResponse) ProtoMessage()    {}
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{4}
}

func (m *SendMessageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendMessageResponse.Unmarshal(m, b)
}
func (m *SendMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendMessageResponse.Marshal(b, m, deterministic)
}
func (m *SendMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMessageResponse.Merge(m, src)
}
func (m *SendMessageResponse) XXX_Size() int {
	return xxx_messageInfo_SendMessageResponse.Size(m)
}
func (m *SendMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendMessageResponse proto.InternalMessageInfo

func (m *SendMessageResponse) GetCommon() *ResponseCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *SendMessageResponse) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *SendMessageResponse) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

type QueryAssignmentRequest struct {
	Topic    *Resource `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Group    *Resource `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	ClientId string    `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Service access point
	Endpoints            *Endpoints `protobuf:"bytes,4,opt,name=endpoints,proto3" json:"endpoints,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *QueryAssignmentRequest) Reset()         { *m = QueryAssignmentRequest{} }
func (m *QueryAssignmentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAssignmentRequest) ProtoMessage()    {}
func (*QueryAssignmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{5}
}

func (m *QueryAssignmentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryAssignmentRequest.Unmarshal(m, b)
}
func (m *QueryAssignmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryAssignmentRequest.Marshal(b, m, deterministic)
}
func (m *QueryAssignmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssignmentRequest.Merge(m, src)
}
func (m *QueryAssignmentRequest) XXX_Size() int {
	return xxx_messageInfo_QueryAssignmentRequest.Size(m)
}
func (m *QueryAssignmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssignmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssignmentRequest proto.InternalMessageInfo

func (m *QueryAssignmentRequest) GetTopic() *Resource {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *QueryAssignmentRequest) GetGroup() *Resource {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *QueryAssignmentRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *QueryAssignmentRequest) GetEndpoints() *Endpoints {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

type QueryAssignmentResponse struct {
	Common               *ResponseCommon `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Assignments          []*Assignment   `protobuf:"bytes,2,rep,name=assignments,proto3" json:"assignments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *QueryAssignmentResponse) Reset()         { *m = QueryAssignmentResponse{} }
func (m *QueryAssignmentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAssignmentResponse) ProtoMessage()    {}
func (*QueryAssignmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{6}
}

func (m *QueryAssignmentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryAssignmentResponse.Unmarshal(m, b)
}
func (m *QueryAssignmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryAssignmentResponse.Marshal(b, m, deterministic)
}
func (m *QueryAssignmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssignmentResponse.Merge(m, src)
}
func (m *QueryAssignmentResponse) XXX_Size() int {
	return xxx_messageInfo_QueryAssignmentResponse.Size(m)
}
func (m *QueryAssignmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssignmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssignmentResponse proto.InternalMessageInfo

func (m *QueryAssignmentResponse) GetCommon() *ResponseCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *QueryAssignmentResponse) GetAssignments() []*Assignment {
	if m != nil {
		return m.Assignments
	}
	return nil
}

type ReceiveMessageRequest struct {
	Group                   *Resource              `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	ClientId                string                 `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Partition               *Partition             `protobuf:"bytes,3,opt,name=partition,proto3" json:"partition,omitempty"`
	FilterExpression        *FilterExpression      `protobuf:"bytes,4,opt,name=filter_expression,json=filterExpression,proto3" json:"filter_expression,omitempty"`
	ConsumePolicy           ConsumePolicy          `protobuf:"varint,5,opt,name=consume_policy,json=consumePolicy,proto3,enum=apache.rocketmq.v1.ConsumePolicy" json:"consume_policy,omitempty"`
	InitializationTimestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=initialization_timestamp,json=initializationTimestamp,proto3" json:"initialization_timestamp,omitempty"`
	BatchSize               int32                  `protobuf:"varint,7,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	InvisibleDuration       *durationpb.Duration   `protobuf:"bytes,8,opt,name=invisible_duration,json=invisibleDuration,proto3" json:"invisible_duration,omitempty"`
	AwaitTime               *durationpb.Duration   `protobuf:"bytes,9,opt,name=await_time,json=awaitTime,proto3" json:"await_time,omitempty"`
	FifoFlag                bool                   `protobuf:"varint,10,opt,name=fifo_flag,json=fifoFlag,proto3" json:"fifo_flag,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}               `json:"-"`
	XXX_unrecognized        []byte                 `json:"-"`
	XXX_sizecache           int32                  `json:"-"`
}

func (m *ReceiveMessageRequest) Reset()         { *m = ReceiveMessageRequest{} }
func (m *ReceiveMessageRequest) String() string { return proto.CompactTextString(m) }
func (*ReceiveMessageRequest) ProtoMessage()    {}
func (*ReceiveMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{7}
}

func (m *ReceiveMessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReceiveMessageRequest.Unmarshal(m, b)
}
func (m *ReceiveMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReceiveMessageRequest.Marshal(b, m, deterministic)
}
func (m *ReceiveMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiveMessageRequest.Merge(m, src)
}
func (m *ReceiveMessageRequest) XXX_Size() int {
	return xxx_messageInfo_ReceiveMessageRequest.Size(m)
}
func (m *ReceiveMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiveMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiveMessageRequest proto.InternalMessageInfo

func (m *ReceiveMessageRequest) GetGroup() *Resource {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *ReceiveMessageRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *ReceiveMessageRequest) GetPartition() *Partition {
	if m != nil {
		return m.Partition
	}
	return nil
}

func (m *ReceiveMessageRequest) GetFilterExpression() *FilterExpression {
	if m != nil {
		return m.FilterExpression
	}
	return nil
}

func (m *ReceiveMessageRequest) GetConsumePolicy() ConsumePolicy {
	if m != nil {
		return m.ConsumePolicy
	}
	return ConsumePolicy_RESUME
}

func (m *ReceiveMessageRequest) GetInitializationTimestamp() *timestamppb.Timestamp {
	if m != nil {
		return m.InitializationTimestamp
	}
	return nil
}

func (m *ReceiveMessageRequest) GetBatchSize() int32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

func (m *ReceiveMessageRequest) GetInvisibleDuration() *durationpb.Duration {
	if m != nil {
		return m.InvisibleDuration
	}
	return nil
}

func (m *ReceiveMessageRequest) GetAwaitTime() *durationpb.Duration {
	if m != nil {
		return m.AwaitTime
	}
	return nil
}

func (m *ReceiveMessageRequest) GetFifoFlag() bool {
	if m != nil {
		return m.FifoFlag
	}
	return false
}

type ReceiveMessageResponse struct {
	Common               *ResponseCommon        `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Messages             []*Message             `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	DeliveryTimestamp    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=delivery_timestamp,json=deliveryTimestamp,proto3" json:"delivery_timestamp,omitempty"`
	InvisibleDuration    *durationpb.Duration   `protobuf:"bytes,4,opt,name=invisible_duration,json=invisibleDuration,proto3" json:"invisible_duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ReceiveMessageResponse) Reset()         { *m = ReceiveMessageResponse{} }
func (m *ReceiveMessageResponse) String() string { return proto.CompactTextString(m) }
func (*ReceiveMessageResponse) ProtoMessage()    {}
func (*ReceiveMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{8}
}

func (m *ReceiveMessageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReceiveMessageResponse.Unmarshal(m, b)
}
func (m *ReceiveMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReceiveMessageResponse.Marshal(b, m, deterministic)
}
func (m *ReceiveMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiveMessageResponse.Merge(m, src)
}
func (m *ReceiveMessageResponse) XXX_Size() int {
	return xxx_messageInfo_ReceiveMessageResponse.Size(m)
}
func (m *ReceiveMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiveMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiveMessageResponse proto.InternalMessageInfo

func (m *ReceiveMessageResponse) GetCommon() *ResponseCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *ReceiveMessageResponse) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *ReceiveMessageResponse) GetDeliveryTimestamp() *timestamppb.Timestamp {
	if m != nil {
		return m.DeliveryTimestamp
	}
	return nil
}

func (m *ReceiveMessageResponse) GetInvisibleDuration() *durationpb.Duration {
	if m != nil {
		return m.InvisibleDuration
	}
	return nil
}

type AckMessageRequest struct {
	Group    *Resource `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Topic    *Resource `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	ClientId string    `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Types that are valid to be assigned to Handle:
	//	*AckMessageRequest_ReceiptHandle
	//	*AckMessageRequest_Offset
	Handle               isAckMessageRequest_Handle `protobuf_oneof:"handle"`
	MessageId            string                     `protobuf:"bytes,6,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *AckMessageRequest) Reset()         { *m = AckMessageRequest{} }
func (m *AckMessageRequest) String() string { return proto.CompactTextString(m) }
func (*AckMessageRequest) ProtoMessage()    {}
func (*AckMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{9}
}

func (m *AckMessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckMessageRequest.Unmarshal(m, b)
}
func (m *AckMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckMessageRequest.Marshal(b, m, deterministic)
}
func (m *AckMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckMessageRequest.Merge(m, src)
}
func (m *AckMessageRequest) XXX_Size() int {
	return xxx_messageInfo_AckMessageRequest.Size(m)
}
func (m *AckMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AckMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AckMessageRequest proto.InternalMessageInfo

func (m *AckMessageRequest) GetGroup() *Resource {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *AckMessageRequest) GetTopic() *Resource {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *AckMessageRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type isAckMessageRequest_Handle interface {
	isAckMessageRequest_Handle()
}

type AckMessageRequest_ReceiptHandle struct {
	ReceiptHandle string `protobuf:"bytes,4,opt,name=receipt_handle,json=receiptHandle,proto3,oneof"`
}

type AckMessageRequest_Offset struct {
	Offset int64 `protobuf:"varint,5,opt,name=offset,proto3,oneof"`
}

func (*AckMessageRequest_ReceiptHandle) isAckMessageRequest_Handle() {}

func (*AckMessageRequest_Offset) isAckMessageRequest_Handle() {}

func (m *AckMessageRequest) GetHandle() isAckMessageRequest_Handle {
	if m != nil {
		return m.Handle
	}
	return nil
}

func (m *AckMessageRequest) GetReceiptHandle() string {
	if x, ok := m.GetHandle().(*AckMessageRequest_ReceiptHandle); ok {
		return x.ReceiptHandle
	}
	return ""
}

func (m *AckMessageRequest) GetOffset() int64 {
	if x, ok := m.GetHandle().(*AckMessageRequest_Offset); ok {
		return x.Offset
	}
	return 0
}

func (m *AckMessageRequest) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AckMessageRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AckMessageRequest_ReceiptHandle)(nil),
		(*AckMessageRequest_Offset)(nil),
	}
}

type AckMessageResponse struct {
	Common               *ResponseCommon `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AckMessageResponse) Reset()         { *m = AckMessageResponse{} }
func (m *AckMessageResponse) String() string { return proto.CompactTextString(m) }
func (*AckMessageResponse) ProtoMessage()    {}
func (*AckMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{10}
}

func (m *AckMessageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckMessageResponse.Unmarshal(m, b)
}
func (m *AckMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckMessageResponse.Marshal(b, m, deterministic)
}
func (m *AckMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckMessageResponse.Merge(m, src)
}
func (m *AckMessageResponse) XXX_Size() int {
	return xxx_messageInfo_AckMessageResponse.Size(m)
}
func (m *AckMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AckMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AckMessageResponse proto.InternalMessageInfo

func (m *AckMessageResponse) GetCommon() *ResponseCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

type NackMessageRequest struct {
	Group                *Resource `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Topic                *Resource `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	ClientId             string    `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ReceiptHandle        string    `protobuf:"bytes,4,opt,name=receipt_handle,json=receiptHandle,proto3" json:"receipt_handle,omitempty"`
	MessageId            string    `protobuf:"bytes,5,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	DeliveryAttempt      int32     `protobuf:"varint,6,opt,name=delivery_attempt,json=deliveryAttempt,proto3" json:"delivery_attempt,omitempty"`
	MaxDeliveryAttempts  int32     `protobuf:"varint,7,opt,name=max_delivery_attempts,json=maxDeliveryAttempts,proto3" json:"max_delivery_attempts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *NackMessageRequest) Reset()         { *m = NackMessageRequest{} }
func (m *NackMessageRequest) String() string { return proto.CompactTextString(m) }
func (*NackMessageRequest) ProtoMessage()    {}
func (*NackMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{11}
}

func (m *NackMessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NackMessageRequest.Unmarshal(m, b)
}
func (m *NackMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NackMessageRequest.Marshal(b, m, deterministic)
}
func (m *NackMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NackMessageRequest.Merge(m, src)
}
func (m *NackMessageRequest) XXX_Size() int {
	return xxx_messageInfo_NackMessageRequest.Size(m)
}
func (m *NackMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NackMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NackMessageRequest proto.InternalMessageInfo

func (m *NackMessageRequest) GetGroup() *Resource {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *NackMessageRequest) GetTopic() *Resource {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *NackMessageRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *NackMessageRequest) GetReceiptHandle() string {
	if m != nil {
		return m.ReceiptHandle
	}
	return ""
}

func (m *NackMessageRequest) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *NackMessageRequest) GetDeliveryAttempt() int32 {
	if m != nil {
		return m.DeliveryAttempt
	}
	return 0
}

func (m *NackMessageRequest) GetMaxDeliveryAttempts() int32 {
	if m != nil {
		return m.MaxDeliveryAttempts
	}
	return 0
}

type NackMessageResponse struct {
	Common               *ResponseCommon `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NackMessageResponse) Reset()         { *m = NackMessageResponse{} }
func (m *NackMessageResponse) String() string { return proto.CompactTextString(m) }
func (*NackMessageResponse) ProtoMessage()    {}
func (*NackMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{12}
}

func (m *NackMessageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NackMessageResponse.Unmarshal(m, b)
}
func (m *NackMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NackMessageResponse.Marshal(b, m, deterministic)
}
func (m *NackMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NackMessageResponse.Merge(m, src)
}
func (m *NackMessageResponse) XXX_Size() int {
	return xxx_messageInfo_NackMessageResponse.Size(m)
}
func (m *NackMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NackMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NackMessageResponse proto.InternalMessageInfo

func (m *NackMessageResponse) GetCommon() *ResponseCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

type ForwardMessageToDeadLetterQueueRequest struct {
	Group                *Resource `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Topic                *Resource `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	ClientId             string    `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ReceiptHandle        string    `protobuf:"bytes,4,opt,name=receipt_handle,json=receiptHandle,proto3" json:"receipt_handle,omitempty"`
	MessageId            string    `protobuf:"bytes,5,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	DeliveryAttempt      int32     `protobuf:"varint,6,opt,name=delivery_attempt,json=deliveryAttempt,proto3" json:"delivery_attempt,omitempty"`
	MaxDeliveryAttempts  int32     `protobuf:"varint,7,opt,name=max_delivery_attempts,json=maxDeliveryAttempts,proto3" json:"max_delivery_attempts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ForwardMessageToDeadLetterQueueRequest) Reset() {
	*m = ForwardMessageToDeadLetterQueueRequest{}
}
func (m *ForwardMessageToDeadLetterQueueRequest) String() string { return proto.CompactTextString(m) }
func (*ForwardMessageToDeadLetterQueueRequest) ProtoMessage()    {}
func (*ForwardMessageToDeadLetterQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{13}
}

func (m *ForwardMessageToDeadLetterQueueRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForwardMessageToDeadLetterQueueRequest.Unmarshal(m, b)
}
func (m *ForwardMessageToDeadLetterQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForwardMessageToDeadLetterQueueRequest.Marshal(b, m, deterministic)
}
func (m *ForwardMessageToDeadLetterQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardMessageToDeadLetterQueueRequest.Merge(m, src)
}
func (m *ForwardMessageToDeadLetterQueueRequest) XXX_Size() int {
	return xxx_messageInfo_ForwardMessageToDeadLetterQueueRequest.Size(m)
}
func (m *ForwardMessageToDeadLetterQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardMessageToDeadLetterQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardMessageToDeadLetterQueueRequest proto.InternalMessageInfo

func (m *ForwardMessageToDeadLetterQueueRequest) GetGroup() *Resource {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *ForwardMessageToDeadLetterQueueRequest) GetTopic() *Resource {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *ForwardMessageToDeadLetterQueueRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *ForwardMessageToDeadLetterQueueRequest) GetReceiptHandle() string {
	if m != nil {
		return m.ReceiptHandle
	}
	return ""
}

func (m *ForwardMessageToDeadLetterQueueRequest) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *ForwardMessageToDeadLetterQueueRequest) GetDeliveryAttempt() int32 {
	if m != nil {
		return m.DeliveryAttempt
	}
	return 0
}

func (m *ForwardMessageToDeadLetterQueueRequest) GetMaxDeliveryAttempts() int32 {
	if m != nil {
		return m.MaxDeliveryAttempts
	}
	return 0
}

type ForwardMessageToDeadLetterQueueResponse struct {
	Common               *ResponseCommon `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ForwardMessageToDeadLetterQueueResponse) Reset() {
	*m = ForwardMessageToDeadLetterQueueResponse{}
}
func (m *ForwardMessageToDeadLetterQueueResponse) String() string { return proto.CompactTextString(m) }
func (*ForwardMessageToDeadLetterQueueResponse) ProtoMessage()    {}
func (*ForwardMessageToDeadLetterQueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{14}
}

func (m *ForwardMessageToDeadLetterQueueResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForwardMessageToDeadLetterQueueResponse.Unmarshal(m, b)
}
func (m *ForwardMessageToDeadLetterQueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForwardMessageToDeadLetterQueueResponse.Marshal(b, m, deterministic)
}
func (m *ForwardMessageToDeadLetterQueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardMessageToDeadLetterQueueResponse.Merge(m, src)
}
func (m *ForwardMessageToDeadLetterQueueResponse) XXX_Size() int {
	return xxx_messageInfo_ForwardMessageToDeadLetterQueueResponse.Size(m)
}
func (m *ForwardMessageToDeadLetterQueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardMessageToDeadLetterQueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardMessageToDeadLetterQueueResponse proto.InternalMessageInfo

func (m *ForwardMessageToDeadLetterQueueResponse) GetCommon() *ResponseCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

type HeartbeatRequest struct {
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Types that are valid to be assigned to ClientData:
	//	*HeartbeatRequest_ProducerData
	//	*HeartbeatRequest_ConsumerData
	ClientData           isHeartbeatRequest_ClientData `protobuf_oneof:"client_data"`
	FifoFlag             bool                          `protobuf:"varint,4,opt,name=fifo_flag,json=fifoFlag,proto3" json:"fifo_flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *HeartbeatRequest) Reset()         { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string { return proto.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()    {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{15}
}

func (m *HeartbeatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartbeatRequest.Unmarshal(m, b)
}
func (m *HeartbeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartbeatRequest.Marshal(b, m, deterministic)
}
func (m *HeartbeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatRequest.Merge(m, src)
}
func (m *HeartbeatRequest) XXX_Size() int {
	return xxx_messageInfo_HeartbeatRequest.Size(m)
}
func (m *HeartbeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatRequest proto.InternalMessageInfo

func (m *HeartbeatRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type isHeartbeatRequest_ClientData interface {
	isHeartbeatRequest_ClientData()
}

type HeartbeatRequest_ProducerData struct {
	ProducerData *ProducerData `protobuf:"bytes,2,opt,name=producer_data,json=producerData,proto3,oneof"`
}

type HeartbeatRequest_ConsumerData struct {
	ConsumerData *ConsumerData `protobuf:"bytes,3,opt,name=consumer_data,json=consumerData,proto3,oneof"`
}

func (*HeartbeatRequest_ProducerData) isHeartbeatRequest_ClientData() {}

func (*HeartbeatRequest_ConsumerData) isHeartbeatRequest_ClientData() {}

func (m *HeartbeatRequest) GetClientData() isHeartbeatRequest_ClientData {
	if m != nil {
		return m.ClientData
	}
	return nil
}

func (m *HeartbeatRequest) GetProducerData() *ProducerData {
	if x, ok := m.GetClientData().(*HeartbeatRequest_ProducerData); ok {
		return x.ProducerData
	}
	return nil
}

func (m *HeartbeatRequest) GetConsumerData() *ConsumerData {
	if x, ok := m.GetClientData().(*HeartbeatRequest_ConsumerData); ok {
		return x.ConsumerData
	}
	return nil
}

func (m *HeartbeatRequest) GetFifoFlag() bool {
	if m != nil {
		return m.FifoFlag
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HeartbeatRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HeartbeatRequest_ProducerData)(nil),
		(*HeartbeatRequest_ConsumerData)(nil),
	}
}

type HeartbeatResponse struct {
	Common               *ResponseCommon `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HeartbeatResponse) Reset()         { *m = HeartbeatResponse{} }
func (m *HeartbeatResponse) String() string { return proto.CompactTextString(m) }
func (*HeartbeatResponse) ProtoMessage()    {}
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{16}
}

func (m *HeartbeatResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartbeatResponse.Unmarshal(m, b)
}
func (m *HeartbeatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartbeatResponse.Marshal(b, m, deterministic)
}
func (m *HeartbeatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatResponse.Merge(m, src)
}
func (m *HeartbeatResponse) XXX_Size() int {
	return xxx_messageInfo_HeartbeatResponse.Size(m)
}
func (m *HeartbeatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatResponse proto.InternalMessageInfo

func (m *HeartbeatResponse) GetCommon() *ResponseCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

type HealthCheckRequest struct {
	Group                *Resource `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	ClientHost           string    `protobuf:"bytes,2,opt,name=client_host,json=clientHost,proto3" json:"client_host,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *HealthCheckRequest) Reset()         { *m = HealthCheckRequest{} }
func (m *HealthCheckRequest) String() string { return proto.CompactTextString(m) }
func (*HealthCheckRequest) ProtoMessage()    {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{17}
}

func (m *HealthCheckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckRequest.Unmarshal(m, b)
}
func (m *HealthCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckRequest.Marshal(b, m, deterministic)
}
func (m *HealthCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckRequest.Merge(m, src)
}
func (m *HealthCheckRequest) XXX_Size() int {
	return xxx_messageInfo_HealthCheckRequest.Size(m)
}
func (m *HealthCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckRequest proto.InternalMessageInfo

func (m *HealthCheckRequest) GetGroup() *Resource {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *HealthCheckRequest) GetClientHost() string {
	if m != nil {
		return m.ClientHost
	}
	return ""
}

type HealthCheckResponse struct {
	Common               *ResponseCommon `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HealthCheckResponse) Reset()         { *m = HealthCheckResponse{} }
func (m *HealthCheckResponse) String() string { return proto.CompactTextString(m) }
func (*HealthCheckResponse) ProtoMessage()    {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{18}
}

func (m *HealthCheckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckResponse.Unmarshal(m, b)
}
func (m *HealthCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckResponse.Marshal(b, m, deterministic)
}
func (m *HealthCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckResponse.Merge(m, src)
}
func (m *HealthCheckResponse) XXX_Size() int {
	return xxx_messageInfo_HealthCheckResponse.Size(m)
}
func (m *HealthCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckResponse proto.InternalMessageInfo

func (m *HealthCheckResponse) GetCommon() *ResponseCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

type EndTransactionRequest struct {
	Group                *Resource                                   `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	MessageId            string                                      `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	TransactionId        string                                      `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Resolution           EndTransactionRequest_TransactionResolution `protobuf:"varint,4,opt,name=resolution,proto3,enum=apache.rocketmq.v1.EndTransactionRequest_TransactionResolution" json:"resolution,omitempty"`
	Source               EndTransactionRequest_Source                `protobuf:"varint,5,opt,name=source,proto3,enum=apache.rocketmq.v1.EndTransactionRequest_Source" json:"source,omitempty"`
	TraceContext         string                                      `protobuf:"bytes,6,opt,name=trace_context,json=traceContext,proto3" json:"trace_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *EndTransactionRequest) Reset()         { *m = EndTransactionRequest{} }
func (m *EndTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*EndTransactionRequest) ProtoMessage()    {}
func (*EndTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{19}
}

func (m *EndTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndTransactionRequest.Unmarshal(m, b)
}
func (m *EndTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndTransactionRequest.Marshal(b, m, deterministic)
}
func (m *EndTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndTransactionRequest.Merge(m, src)
}
func (m *EndTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_EndTransactionRequest.Size(m)
}
func (m *EndTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EndTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EndTransactionRequest proto.InternalMessageInfo

func (m *EndTransactionRequest) GetGroup() *Resource {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *EndTransactionRequest) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *EndTransactionRequest) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *EndTransactionRequest) GetResolution() EndTransactionRequest_TransactionResolution {
	if m != nil {
		return m.Resolution
	}
	return EndTransactionRequest_COMMIT
}

func (m *EndTransactionRequest) GetSource() EndTransactionRequest_Source {
	if m != nil {
		return m.Source
	}
	return EndTransactionRequest_CLIENT
}

func (m *EndTransactionRequest) GetTraceContext() string {
	if m != nil {
		return m.TraceContext
	}
	return ""
}

type EndTransactionResponse struct {
	Common               *ResponseCommon `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *EndTransactionResponse) Reset()         { *m = EndTransactionResponse{} }
func (m *EndTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*EndTransactionResponse) ProtoMessage()    {}
func (*EndTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{20}
}

func (m *EndTransactionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndTransactionResponse.Unmarshal(m, b)
}
func (m *EndTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndTransactionResponse.Marshal(b, m, deterministic)
}
func (m *EndTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndTransactionResponse.Merge(m, src)
}
func (m *EndTransactionResponse) XXX_Size() int {
	return xxx_messageInfo_EndTransactionResponse.Size(m)
}
func (m *EndTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EndTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EndTransactionResponse proto.InternalMessageInfo

func (m *EndTransactionResponse) GetCommon() *ResponseCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

type QueryOffsetRequest struct {
	Partition            *Partition             `protobuf:"bytes,1,opt,name=partition,proto3" json:"partition,omitempty"`
	Policy               QueryOffsetPolicy      `protobuf:"varint,2,opt,name=policy,proto3,enum=apache.rocketmq.v1.QueryOffsetPolicy" json:"policy,omitempty"`
	TimePoint            *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time_point,json=timePoint,proto3" json:"time_point,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *QueryOffsetRequest) Reset()         { *m = QueryOffsetRequest{} }
func (m *QueryOffsetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOffsetRequest) ProtoMessage()    {}
func (*QueryOffsetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{21}
}

func (m *QueryOffsetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryOffsetRequest.Unmarshal(m, b)
}
func (m *QueryOffsetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryOffsetRequest.Marshal(b, m, deterministic)
}
func (m *QueryOffsetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOffsetRequest.Merge(m, src)
}
func (m *QueryOffsetRequest) XXX_Size() int {
	return xxx_messageInfo_QueryOffsetRequest.Size(m)
}
func (m *QueryOffsetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOffsetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOffsetRequest proto.InternalMessageInfo

func (m *QueryOffsetRequest) GetPartition() *Partition {
	if m != nil {
		return m.Partition
	}
	return nil
}

func (m *QueryOffsetRequest) GetPolicy() QueryOffsetPolicy {
	if m != nil {
		return m.Policy
	}
	return QueryOffsetPolicy_BEGINNING
}

func (m *QueryOffsetRequest) GetTimePoint() *timestamppb.Timestamp {
	if m != nil {
		return m.TimePoint
	}
	return nil
}

type QueryOffsetResponse struct {
	Common               *ResponseCommon `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Offset               int64           `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *QueryOffsetResponse) Reset()         { *m = QueryOffsetResponse{} }
func (m *QueryOffsetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOffsetResponse) ProtoMessage()    {}
func (*QueryOffsetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{22}
}

func (m *QueryOffsetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryOffsetResponse.Unmarshal(m, b)
}
func (m *QueryOffsetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryOffsetResponse.Marshal(b, m, deterministic)
}
func (m *QueryOffsetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOffsetResponse.Merge(m, src)
}
func (m *QueryOffsetResponse) XXX_Size() int {
	return xxx_messageInfo_QueryOffsetResponse.Size(m)
}
func (m *QueryOffsetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOffsetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOffsetResponse proto.InternalMessageInfo

func (m *QueryOffsetResponse) GetCommon() *ResponseCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *QueryOffsetResponse) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type PullMessageRequest struct {
	Group                *Resource            `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Partition            *Partition           `protobuf:"bytes,2,opt,name=partition,proto3" json:"partition,omitempty"`
	Offset               int64                `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	BatchSize            int32                `protobuf:"varint,4,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	AwaitTime            *durationpb.Duration `protobuf:"bytes,5,opt,name=await_time,json=awaitTime,proto3" json:"await_time,omitempty"`
	FilterExpression     *FilterExpression    `protobuf:"bytes,6,opt,name=filter_expression,json=filterExpression,proto3" json:"filter_expression,omitempty"`
	ClientId             string               `protobuf:"bytes,7,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PullMessageRequest) Reset()         { *m = PullMessageRequest{} }
func (m *PullMessageRequest) String() string { return proto.CompactTextString(m) }
func (*PullMessageRequest) ProtoMessage()    {}
func (*PullMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{23}
}

func (m *PullMessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullMessageRequest.Unmarshal(m, b)
}
func (m *PullMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullMessageRequest.Marshal(b, m, deterministic)
}
func (m *PullMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullMessageRequest.Merge(m, src)
}
func (m *PullMessageRequest) XXX_Size() int {
	return xxx_messageInfo_PullMessageRequest.Size(m)
}
func (m *PullMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullMessageRequest proto.InternalMessageInfo

func (m *PullMessageRequest) GetGroup() *Resource {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *PullMessageRequest) GetPartition() *Partition {
	if m != nil {
		return m.Partition
	}
	return nil
}

func (m *PullMessageRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *PullMessageRequest) GetBatchSize() int32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

func (m *PullMessageRequest) GetAwaitTime() *durationpb.Duration {
	if m != nil {
		return m.AwaitTime
	}
	return nil
}

func (m *PullMessageRequest) GetFilterExpression() *FilterExpression {
	if m != nil {
		return m.FilterExpression
	}
	return nil
}

func (m *PullMessageRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type PullMessageResponse struct {
	Common               *ResponseCommon `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	MinOffset            int64           `protobuf:"varint,2,opt,name=min_offset,json=minOffset,proto3" json:"min_offset,omitempty"`
	NextOffset           int64           `protobuf:"varint,3,opt,name=next_offset,json=nextOffset,proto3" json:"next_offset,omitempty"`
	MaxOffset            int64           `protobuf:"varint,4,opt,name=max_offset,json=maxOffset,proto3" json:"max_offset,omitempty"`
	Messages             []*Message      `protobuf:"bytes,5,rep,name=messages,proto3" json:"messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PullMessageResponse) Reset()         { *m = PullMessageResponse{} }
func (m *PullMessageResponse) String() string { return proto.CompactTextString(m) }
func (*PullMessageResponse) ProtoMessage()    {}
func (*PullMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{24}
}

func (m *PullMessageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullMessageResponse.Unmarshal(m, b)
}
func (m *PullMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullMessageResponse.Marshal(b, m, deterministic)
}
func (m *PullMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullMessageResponse.Merge(m, src)
}
func (m *PullMessageResponse) XXX_Size() int {
	return xxx_messageInfo_PullMessageResponse.Size(m)
}
func (m *PullMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PullMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PullMessageResponse proto.InternalMessageInfo

func (m *PullMessageResponse) GetCommon() *ResponseCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *PullMessageResponse) GetMinOffset() int64 {
	if m != nil {
		return m.MinOffset
	}
	return 0
}

func (m *PullMessageResponse) GetNextOffset() int64 {
	if m != nil {
		return m.NextOffset
	}
	return 0
}

func (m *PullMessageResponse) GetMaxOffset() int64 {
	if m != nil {
		return m.MaxOffset
	}
	return 0
}

func (m *PullMessageResponse) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type NoopCommand struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoopCommand) Reset()         { *m = NoopCommand{} }
func (m *NoopCommand) String() string { return proto.CompactTextString(m) }
func (*NoopCommand) ProtoMessage()    {}
func (*NoopCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{25}
}

func (m *NoopCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoopCommand.Unmarshal(m, b)
}
func (m *NoopCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoopCommand.Marshal(b, m, deterministic)
}
func (m *NoopCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoopCommand.Merge(m, src)
}
func (m *NoopCommand) XXX_Size() int {
	return xxx_messageInfo_NoopCommand.Size(m)
}
func (m *NoopCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_NoopCommand.DiscardUnknown(m)
}

var xxx_messageInfo_NoopCommand proto.InternalMessageInfo

type PrintThreadStackTraceCommand struct {
	CommandId            string   `protobuf:"bytes,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrintThreadStackTraceCommand) Reset()         { *m = PrintThreadStackTraceCommand{} }
func (m *PrintThreadStackTraceCommand) String() string { return proto.CompactTextString(m) }
func (*PrintThreadStackTraceCommand) ProtoMessage()    {}
func (*PrintThreadStackTraceCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{26}
}

func (m *PrintThreadStackTraceCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrintThreadStackTraceCommand.Unmarshal(m, b)
}
func (m *PrintThreadStackTraceCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrintThreadStackTraceCommand.Marshal(b, m, deterministic)
}
func (m *PrintThreadStackTraceCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrintThreadStackTraceCommand.Merge(m, src)
}
func (m *PrintThreadStackTraceCommand) XXX_Size() int {
	return xxx_messageInfo_PrintThreadStackTraceCommand.Size(m)
}
func (m *PrintThreadStackTraceCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_PrintThreadStackTraceCommand.DiscardUnknown(m)
}

var xxx_messageInfo_PrintThreadStackTraceCommand proto.InternalMessageInfo

func (m *PrintThreadStackTraceCommand) GetCommandId() string {
	if m != nil {
		return m.CommandId
	}
	return ""
}

type ReportThreadStackTraceRequest struct {
	CommandId            string   `protobuf:"bytes,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	ThreadStackTrace     string   `protobuf:"bytes,2,opt,name=thread_stack_trace,json=threadStackTrace,proto3" json:"thread_stack_trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportThreadStackTraceRequest) Reset()         { *m = ReportThreadStackTraceRequest{} }
func (m *ReportThreadStackTraceRequest) String() string { return proto.CompactTextString(m) }
func (*ReportThreadStackTraceRequest) ProtoMessage()    {}
func (*ReportThreadStackTraceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{27}
}

func (m *ReportThreadStackTraceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportThreadStackTraceRequest.Unmarshal(m, b)
}
func (m *ReportThreadStackTraceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportThreadStackTraceRequest.Marshal(b, m, deterministic)
}
func (m *ReportThreadStackTraceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportThreadStackTraceRequest.Merge(m, src)
}
func (m *ReportThreadStackTraceRequest) XXX_Size() int {
	return xxx_messageInfo_ReportThreadStackTraceRequest.Size(m)
}
func (m *ReportThreadStackTraceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportThreadStackTraceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportThreadStackTraceRequest proto.InternalMessageInfo

func (m *ReportThreadStackTraceRequest) GetCommandId() string {
	if m != nil {
		return m.CommandId
	}
	return ""
}

func (m *ReportThreadStackTraceRequest) GetThreadStackTrace() string {
	if m != nil {
		return m.ThreadStackTrace
	}
	return ""
}

type ReportThreadStackTraceResponse struct {
	Common               *ResponseCommon `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ReportThreadStackTraceResponse) Reset()         { *m = ReportThreadStackTraceResponse{} }
func (m *ReportThreadStackTraceResponse) String() string { return proto.CompactTextString(m) }
func (*ReportThreadStackTraceResponse) ProtoMessage()    {}
func (*ReportThreadStackTraceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{28}
}

func (m *ReportThreadStackTraceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportThreadStackTraceResponse.Unmarshal(m, b)
}
func (m *ReportThreadStackTraceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportThreadStackTraceResponse.Marshal(b, m, deterministic)
}
func (m *ReportThreadStackTraceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportThreadStackTraceResponse.Merge(m, src)
}
func (m *ReportThreadStackTraceResponse) XXX_Size() int {
	return xxx_messageInfo_ReportThreadStackTraceResponse.Size(m)
}
func (m *ReportThreadStackTraceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportThreadStackTraceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReportThreadStackTraceResponse proto.InternalMessageInfo

func (m *ReportThreadStackTraceResponse) GetCommon() *ResponseCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

type VerifyMessageConsumptionCommand struct {
	CommandId            string   `protobuf:"bytes,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	Message              *Message `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyMessageConsumptionCommand) Reset()         { *m = VerifyMessageConsumptionCommand{} }
func (m *VerifyMessageConsumptionCommand) String() string { return proto.CompactTextString(m) }
func (*VerifyMessageConsumptionCommand) ProtoMessage()    {}
func (*VerifyMessageConsumptionCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{29}
}

func (m *VerifyMessageConsumptionCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyMessageConsumptionCommand.Unmarshal(m, b)
}
func (m *VerifyMessageConsumptionCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyMessageConsumptionCommand.Marshal(b, m, deterministic)
}
func (m *VerifyMessageConsumptionCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyMessageConsumptionCommand.Merge(m, src)
}
func (m *VerifyMessageConsumptionCommand) XXX_Size() int {
	return xxx_messageInfo_VerifyMessageConsumptionCommand.Size(m)
}
func (m *VerifyMessageConsumptionCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyMessageConsumptionCommand.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyMessageConsumptionCommand proto.InternalMessageInfo

func (m *VerifyMessageConsumptionCommand) GetCommandId() string {
	if m != nil {
		return m.CommandId
	}
	return ""
}

func (m *VerifyMessageConsumptionCommand) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type ReportMessageConsumptionResultRequest struct {
	CommandId string `protobuf:"bytes,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	// 1. Return `INVALID_ARGUMENT` if message is corrupted.
	// 2. Return `INTERNAL` if failed to consume message.
	// 3. Return `OK` if success.
	Status               *status.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ReportMessageConsumptionResultRequest) Reset()         { *m = ReportMessageConsumptionResultRequest{} }
func (m *ReportMessageConsumptionResultRequest) String() string { return proto.CompactTextString(m) }
func (*ReportMessageConsumptionResultRequest) ProtoMessage()    {}
func (*ReportMessageConsumptionResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{30}
}

func (m *ReportMessageConsumptionResultRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportMessageConsumptionResultRequest.Unmarshal(m, b)
}
func (m *ReportMessageConsumptionResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportMessageConsumptionResultRequest.Marshal(b, m, deterministic)
}
func (m *ReportMessageConsumptionResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportMessageConsumptionResultRequest.Merge(m, src)
}
func (m *ReportMessageConsumptionResultRequest) XXX_Size() int {
	return xxx_messageInfo_ReportMessageConsumptionResultRequest.Size(m)
}
func (m *ReportMessageConsumptionResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportMessageConsumptionResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportMessageConsumptionResultRequest proto.InternalMessageInfo

func (m *ReportMessageConsumptionResultRequest) GetCommandId() string {
	if m != nil {
		return m.CommandId
	}
	return ""
}

func (m *ReportMessageConsumptionResultRequest) GetStatus() *status.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type ReportMessageConsumptionResultResponse struct {
	Common               *ResponseCommon `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ReportMessageConsumptionResultResponse) Reset() {
	*m = ReportMessageConsumptionResultResponse{}
}
func (m *ReportMessageConsumptionResultResponse) String() string { return proto.CompactTextString(m) }
func (*ReportMessageConsumptionResultResponse) ProtoMessage()    {}
func (*ReportMessageConsumptionResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{31}
}

func (m *ReportMessageConsumptionResultResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportMessageConsumptionResultResponse.Unmarshal(m, b)
}
func (m *ReportMessageConsumptionResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportMessageConsumptionResultResponse.Marshal(b, m, deterministic)
}
func (m *ReportMessageConsumptionResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportMessageConsumptionResultResponse.Merge(m, src)
}
func (m *ReportMessageConsumptionResultResponse) XXX_Size() int {
	return xxx_messageInfo_ReportMessageConsumptionResultResponse.Size(m)
}
func (m *ReportMessageConsumptionResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportMessageConsumptionResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReportMessageConsumptionResultResponse proto.InternalMessageInfo

func (m *ReportMessageConsumptionResultResponse) GetCommon() *ResponseCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

type RecoverOrphanedTransactionCommand struct {
	OrphanedTransactionalMessage *Message `protobuf:"bytes,1,opt,name=orphaned_transactional_message,json=orphanedTransactionalMessage,proto3" json:"orphaned_transactional_message,omitempty"`
	TransactionId                string   `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *RecoverOrphanedTransactionCommand) Reset()         { *m = RecoverOrphanedTransactionCommand{} }
func (m *RecoverOrphanedTransactionCommand) String() string { return proto.CompactTextString(m) }
func (*RecoverOrphanedTransactionCommand) ProtoMessage()    {}
func (*RecoverOrphanedTransactionCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{32}
}

func (m *RecoverOrphanedTransactionCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecoverOrphanedTransactionCommand.Unmarshal(m, b)
}
func (m *RecoverOrphanedTransactionCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecoverOrphanedTransactionCommand.Marshal(b, m, deterministic)
}
func (m *RecoverOrphanedTransactionCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecoverOrphanedTransactionCommand.Merge(m, src)
}
func (m *RecoverOrphanedTransactionCommand) XXX_Size() int {
	return xxx_messageInfo_RecoverOrphanedTransactionCommand.Size(m)
}
func (m *RecoverOrphanedTransactionCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_RecoverOrphanedTransactionCommand.DiscardUnknown(m)
}

var xxx_messageInfo_RecoverOrphanedTransactionCommand proto.InternalMessageInfo

func (m *RecoverOrphanedTransactionCommand) GetOrphanedTransactionalMessage() *Message {
	if m != nil {
		return m.OrphanedTransactionalMessage
	}
	return nil
}

func (m *RecoverOrphanedTransactionCommand) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

type PollCommandRequest struct {
	ClientId string      `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Topics   []*Resource `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	// Types that are valid to be assigned to Group:
	//	*PollCommandRequest_ProducerGroup
	//	*PollCommandRequest_ConsumerGroup
	Group                isPollCommandRequest_Group `protobuf_oneof:"group"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PollCommandRequest) Reset()         { *m = PollCommandRequest{} }
func (m *PollCommandRequest) String() string { return proto.CompactTextString(m) }
func (*PollCommandRequest) ProtoMessage()    {}
func (*PollCommandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{33}
}

func (m *PollCommandRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PollCommandRequest.Unmarshal(m, b)
}
func (m *PollCommandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PollCommandRequest.Marshal(b, m, deterministic)
}
func (m *PollCommandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollCommandRequest.Merge(m, src)
}
func (m *PollCommandRequest) XXX_Size() int {
	return xxx_messageInfo_PollCommandRequest.Size(m)
}
func (m *PollCommandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PollCommandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PollCommandRequest proto.InternalMessageInfo

func (m *PollCommandRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *PollCommandRequest) GetTopics() []*Resource {
	if m != nil {
		return m.Topics
	}
	return nil
}

type isPollCommandRequest_Group interface {
	isPollCommandRequest_Group()
}

type PollCommandRequest_ProducerGroup struct {
	ProducerGroup *Resource `protobuf:"bytes,3,opt,name=producer_group,json=producerGroup,proto3,oneof"`
}

type PollCommandRequest_ConsumerGroup struct {
	ConsumerGroup *Resource `protobuf:"bytes,4,opt,name=consumer_group,json=consumerGroup,proto3,oneof"`
}

func (*PollCommandRequest_ProducerGroup) isPollCommandRequest_Group() {}

func (*PollCommandRequest_ConsumerGroup) isPollCommandRequest_Group() {}

func (m *PollCommandRequest) GetGroup() isPollCommandRequest_Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *PollCommandRequest) GetProducerGroup() *Resource {
	if x, ok := m.GetGroup().(*PollCommandRequest_ProducerGroup); ok {
		return x.ProducerGroup
	}
	return nil
}

func (m *PollCommandRequest) GetConsumerGroup() *Resource {
	if x, ok := m.GetGroup().(*PollCommandRequest_ConsumerGroup); ok {
		return x.ConsumerGroup
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PollCommandRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PollCommandRequest_ProducerGroup)(nil),
		(*PollCommandRequest_ConsumerGroup)(nil),
	}
}

type PollCommandResponse struct {
	// Types that are valid to be assigned to Type:
	//	*PollCommandResponse_NoopCommand
	//	*PollCommandResponse_PrintThreadStackTraceCommand
	//	*PollCommandResponse_VerifyMessageConsumptionCommand
	//	*PollCommandResponse_RecoverOrphanedTransactionCommand
	Type                 isPollCommandResponse_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PollCommandResponse) Reset()         { *m = PollCommandResponse{} }
func (m *PollCommandResponse) String() string { return proto.CompactTextString(m) }
func (*PollCommandResponse) ProtoMessage()    {}
func (*PollCommandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{34}
}

func (m *PollCommandResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PollCommandResponse.Unmarshal(m, b)
}
func (m *PollCommandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PollCommandResponse.Marshal(b, m, deterministic)
}
func (m *PollCommandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollCommandResponse.Merge(m, src)
}
func (m *PollCommandResponse) XXX_Size() int {
	return xxx_messageInfo_PollCommandResponse.Size(m)
}
func (m *PollCommandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PollCommandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PollCommandResponse proto.InternalMessageInfo

type isPollCommandResponse_Type interface {
	isPollCommandResponse_Type()
}

type PollCommandResponse_NoopCommand struct {
	NoopCommand *NoopCommand `protobuf:"bytes,1,opt,name=noop_command,json=noopCommand,proto3,oneof"`
}

type PollCommandResponse_PrintThreadStackTraceCommand struct {
	PrintThreadStackTraceCommand *PrintThreadStackTraceCommand `protobuf:"bytes,2,opt,name=print_thread_stack_trace_command,json=printThreadStackTraceCommand,proto3,oneof"`
}

type PollCommandResponse_VerifyMessageConsumptionCommand struct {
	VerifyMessageConsumptionCommand *VerifyMessageConsumptionCommand `protobuf:"bytes,3,opt,name=verify_message_consumption_command,json=verifyMessageConsumptionCommand,proto3,oneof"`
}

type PollCommandResponse_RecoverOrphanedTransactionCommand struct {
	RecoverOrphanedTransactionCommand *RecoverOrphanedTransactionCommand `protobuf:"bytes,4,opt,name=recover_orphaned_transaction_command,json=recoverOrphanedTransactionCommand,proto3,oneof"`
}

func (*PollCommandResponse_NoopCommand) isPollCommandResponse_Type() {}

func (*PollCommandResponse_PrintThreadStackTraceCommand) isPollCommandResponse_Type() {}

func (*PollCommandResponse_VerifyMessageConsumptionCommand) isPollCommandResponse_Type() {}

func (*PollCommandResponse_RecoverOrphanedTransactionCommand) isPollCommandResponse_Type() {}

func (m *PollCommandResponse) GetType() isPollCommandResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *PollCommandResponse) GetNoopCommand() *NoopCommand {
	if x, ok := m.GetType().(*PollCommandResponse_NoopCommand); ok {
		return x.NoopCommand
	}
	return nil
}

func (m *PollCommandResponse) GetPrintThreadStackTraceCommand() *PrintThreadStackTraceCommand {
	if x, ok := m.GetType().(*PollCommandResponse_PrintThreadStackTraceCommand); ok {
		return x.PrintThreadStackTraceCommand
	}
	return nil
}

func (m *PollCommandResponse) GetVerifyMessageConsumptionCommand() *VerifyMessageConsumptionCommand {
	if x, ok := m.GetType().(*PollCommandResponse_VerifyMessageConsumptionCommand); ok {
		return x.VerifyMessageConsumptionCommand
	}
	return nil
}

func (m *PollCommandResponse) GetRecoverOrphanedTransactionCommand() *RecoverOrphanedTransactionCommand {
	if x, ok := m.GetType().(*PollCommandResponse_RecoverOrphanedTransactionCommand); ok {
		return x.RecoverOrphanedTransactionCommand
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PollCommandResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PollCommandResponse_NoopCommand)(nil),
		(*PollCommandResponse_PrintThreadStackTraceCommand)(nil),
		(*PollCommandResponse_VerifyMessageConsumptionCommand)(nil),
		(*PollCommandResponse_RecoverOrphanedTransactionCommand)(nil),
	}
}

type NotifyClientTerminationRequest struct {
	// Types that are valid to be assigned to Group:
	//	*NotifyClientTerminationRequest_ProducerGroup
	//	*NotifyClientTerminationRequest_ConsumerGroup
	Group                isNotifyClientTerminationRequest_Group `protobuf_oneof:"group"`
	ClientId             string                                 `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *NotifyClientTerminationRequest) Reset()         { *m = NotifyClientTerminationRequest{} }
func (m *NotifyClientTerminationRequest) String() string { return proto.CompactTextString(m) }
func (*NotifyClientTerminationRequest) ProtoMessage()    {}
func (*NotifyClientTerminationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{35}
}

func (m *NotifyClientTerminationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotifyClientTerminationRequest.Unmarshal(m, b)
}
func (m *NotifyClientTerminationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotifyClientTerminationRequest.Marshal(b, m, deterministic)
}
func (m *NotifyClientTerminationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyClientTerminationRequest.Merge(m, src)
}
func (m *NotifyClientTerminationRequest) XXX_Size() int {
	return xxx_messageInfo_NotifyClientTerminationRequest.Size(m)
}
func (m *NotifyClientTerminationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyClientTerminationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyClientTerminationRequest proto.InternalMessageInfo

type isNotifyClientTerminationRequest_Group interface {
	isNotifyClientTerminationRequest_Group()
}

type NotifyClientTerminationRequest_ProducerGroup struct {
	ProducerGroup *Resource `protobuf:"bytes,1,opt,name=producer_group,json=producerGroup,proto3,oneof"`
}

type NotifyClientTerminationRequest_ConsumerGroup struct {
	ConsumerGroup *Resource `protobuf:"bytes,2,opt,name=consumer_group,json=consumerGroup,proto3,oneof"`
}

func (*NotifyClientTerminationRequest_ProducerGroup) isNotifyClientTerminationRequest_Group() {}

func (*NotifyClientTerminationRequest_ConsumerGroup) isNotifyClientTerminationRequest_Group() {}

func (m *NotifyClientTerminationRequest) GetGroup() isNotifyClientTerminationRequest_Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *NotifyClientTerminationRequest) GetProducerGroup() *Resource {
	if x, ok := m.GetGroup().(*NotifyClientTerminationRequest_ProducerGroup); ok {
		return x.ProducerGroup
	}
	return nil
}

func (m *NotifyClientTerminationRequest) GetConsumerGroup() *Resource {
	if x, ok := m.GetGroup().(*NotifyClientTerminationRequest_ConsumerGroup); ok {
		return x.ConsumerGroup
	}
	return nil
}

func (m *NotifyClientTerminationRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NotifyClientTerminationRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NotifyClientTerminationRequest_ProducerGroup)(nil),
		(*NotifyClientTerminationRequest_ConsumerGroup)(nil),
	}
}

type NotifyClientTerminationResponse struct {
	Common               *ResponseCommon `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NotifyClientTerminationResponse) Reset()         { *m = NotifyClientTerminationResponse{} }
func (m *NotifyClientTerminationResponse) String() string { return proto.CompactTextString(m) }
func (*NotifyClientTerminationResponse) ProtoMessage()    {}
func (*NotifyClientTerminationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebe5e0b089e977b9, []int{36}
}

func (m *NotifyClientTerminationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotifyClientTerminationResponse.Unmarshal(m, b)
}
func (m *NotifyClientTerminationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotifyClientTerminationResponse.Marshal(b, m, deterministic)
}
func (m *NotifyClientTerminationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyClientTerminationResponse.Merge(m, src)
}
func (m *NotifyClientTerminationResponse) XXX_Size() int {
	return xxx_messageInfo_NotifyClientTerminationResponse.Size(m)
}
func (m *NotifyClientTerminationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyClientTerminationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyClientTerminationResponse proto.InternalMessageInfo

func (m *NotifyClientTerminationResponse) GetCommon() *ResponseCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

func init() {
	proto.RegisterEnum("apache.rocketmq.v1.EndTransactionRequest_TransactionResolution", EndTransactionRequest_TransactionResolution_name, EndTransactionRequest_TransactionResolution_value)
	proto.RegisterEnum("apache.rocketmq.v1.EndTransactionRequest_Source", EndTransactionRequest_Source_name, EndTransactionRequest_Source_value)
	proto.RegisterType((*ResponseCommon)(nil), "apache.rocketmq.v1.ResponseCommon")
	proto.RegisterType((*QueryRouteRequest)(nil), "apache.rocketmq.v1.QueryRouteRequest")
	proto.RegisterType((*QueryRouteResponse)(nil), "apache.rocketmq.v1.QueryRouteResponse")
	proto.RegisterType((*SendMessageRequest)(nil), "apache.rocketmq.v1.SendMessageRequest")
	proto.RegisterType((*SendMessageResponse)(nil), "apache.rocketmq.v1.SendMessageResponse")
	proto.RegisterType((*QueryAssignmentRequest)(nil), "apache.rocketmq.v1.QueryAssignmentRequest")
	proto.RegisterType((*QueryAssignmentResponse)(nil), "apache.rocketmq.v1.QueryAssignmentResponse")
	proto.RegisterType((*ReceiveMessageRequest)(nil), "apache.rocketmq.v1.ReceiveMessageRequest")
	proto.RegisterType((*ReceiveMessageResponse)(nil), "apache.rocketmq.v1.ReceiveMessageResponse")
	proto.RegisterType((*AckMessageRequest)(nil), "apache.rocketmq.v1.AckMessageRequest")
	proto.RegisterType((*AckMessageResponse)(nil), "apache.rocketmq.v1.AckMessageResponse")
	proto.RegisterType((*NackMessageRequest)(nil), "apache.rocketmq.v1.NackMessageRequest")
	proto.RegisterType((*NackMessageResponse)(nil), "apache.rocketmq.v1.NackMessageResponse")
	proto.RegisterType((*ForwardMessageToDeadLetterQueueRequest)(nil), "apache.rocketmq.v1.ForwardMessageToDeadLetterQueueRequest")
	proto.RegisterType((*ForwardMessageToDeadLetterQueueResponse)(nil), "apache.rocketmq.v1.ForwardMessageToDeadLetterQueueResponse")
	proto.RegisterType((*HeartbeatRequest)(nil), "apache.rocketmq.v1.HeartbeatRequest")
	proto.RegisterType((*HeartbeatResponse)(nil), "apache.rocketmq.v1.HeartbeatResponse")
	proto.RegisterType((*HealthCheckRequest)(nil), "apache.rocketmq.v1.HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "apache.rocketmq.v1.HealthCheckResponse")
	proto.RegisterType((*EndTransactionRequest)(nil), "apache.rocketmq.v1.EndTransactionRequest")
	proto.RegisterType((*EndTransactionResponse)(nil), "apache.rocketmq.v1.EndTransactionResponse")
	proto.RegisterType((*QueryOffsetRequest)(nil), "apache.rocketmq.v1.QueryOffsetRequest")
	proto.RegisterType((*QueryOffsetResponse)(nil), "apache.rocketmq.v1.QueryOffsetResponse")
	proto.RegisterType((*PullMessageRequest)(nil), "apache.rocketmq.v1.PullMessageRequest")
	proto.RegisterType((*PullMessageResponse)(nil), "apache.rocketmq.v1.PullMessageResponse")
	proto.RegisterType((*NoopCommand)(nil), "apache.rocketmq.v1.NoopCommand")
	proto.RegisterType((*PrintThreadStackTraceCommand)(nil), "apache.rocketmq.v1.PrintThreadStackTraceCommand")
	proto.RegisterType((*ReportThreadStackTraceRequest)(nil), "apache.rocketmq.v1.ReportThreadStackTraceRequest")
	proto.RegisterType((*ReportThreadStackTraceResponse)(nil), "apache.rocketmq.v1.ReportThreadStackTraceResponse")
	proto.RegisterType((*VerifyMessageConsumptionCommand)(nil), "apache.rocketmq.v1.VerifyMessageConsumptionCommand")
	proto.RegisterType((*ReportMessageConsumptionResultRequest)(nil), "apache.rocketmq.v1.ReportMessageConsumptionResultRequest")
	proto.RegisterType((*ReportMessageConsumptionResultResponse)(nil), "apache.rocketmq.v1.ReportMessageConsumptionResultResponse")
	proto.RegisterType((*RecoverOrphanedTransactionCommand)(nil), "apache.rocketmq.v1.RecoverOrphanedTransactionCommand")
	proto.RegisterType((*PollCommandRequest)(nil), "apache.rocketmq.v1.PollCommandRequest")
	proto.RegisterType((*PollCommandResponse)(nil), "apache.rocketmq.v1.PollCommandResponse")
	proto.RegisterType((*NotifyClientTerminationRequest)(nil), "apache.rocketmq.v1.NotifyClientTerminationRequest")
	proto.RegisterType((*NotifyClientTerminationResponse)(nil), "apache.rocketmq.v1.NotifyClientTerminationResponse")
}

func init() { proto.RegisterFile("apache/rocketmq/v1/service.proto", fileDescriptor_ebe5e0b089e977b9) }

var fileDescriptor_ebe5e0b089e977b9 = []byte{
	// 2275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x1a, 0x4d, 0x6f, 0x1b, 0xc7,
	0x95, 0x4b, 0x52, 0x34, 0xf9, 0x24, 0x2b, 0xd4, 0x08, 0xb6, 0x55, 0xc6, 0xb6, 0x64, 0xc6, 0x96,
	0x1d, 0xb7, 0x90, 0x62, 0x39, 0x41, 0x1b, 0xa7, 0x41, 0x4b, 0x7d, 0x38, 0x94, 0xea, 0x0f, 0x79,
	0xa5, 0x38, 0x40, 0x80, 0x60, 0x3b, 0x5a, 0x0e, 0xa5, 0xad, 0x97, 0x3b, 0x9b, 0xd9, 0xa1, 0x22,
	0x19, 0xe8, 0xa1, 0x41, 0x0e, 0x45, 0x0e, 0xbd, 0xf5, 0x50, 0xa0, 0x05, 0x7a, 0x2c, 0x7a, 0xed,
	0x3f, 0x28, 0x8a, 0xde, 0x7b, 0x0b, 0x7a, 0x69, 0x7f, 0x40, 0x81, 0x1e, 0x8a, 0xde, 0x8b, 0x9d,
	0x99, 0x5d, 0xee, 0x72, 0x87, 0x1f, 0x92, 0x78, 0xe8, 0x21, 0x37, 0xee, 0xcc, 0xfb, 0x9a, 0xf7,
	0xde, 0xbc, 0xaf, 0x21, 0x2c, 0x61, 0x1f, 0xdb, 0x47, 0x64, 0x95, 0x51, 0xfb, 0x15, 0xe1, 0x9d,
	0xcf, 0x57, 0x8f, 0x1f, 0xac, 0x06, 0x84, 0x1d, 0x3b, 0x36, 0x59, 0xf1, 0x19, 0xe5, 0x14, 0x21,
	0x09, 0xb1, 0x12, 0x41, 0xac, 0x1c, 0x3f, 0xa8, 0xdd, 0x3c, 0xa4, 0xf4, 0xd0, 0x25, 0xab, 0x02,
	0xe2, 0xa0, 0xdb, 0x5e, 0x6d, 0x75, 0x19, 0xe6, 0x0e, 0xf5, 0x24, 0x4e, 0x6d, 0xb1, 0x7f, 0x9f,
	0x3b, 0x1d, 0x12, 0x70, 0xdc, 0xf1, 0x15, 0x40, 0x44, 0x80, 0xf9, 0xf6, 0x2a, 0x61, 0x8c, 0x32,
	0xab, 0x45, 0x38, 0x76, 0xdc, 0x40, 0xed, 0x5f, 0x4b, 0xec, 0x07, 0x1c, 0xf3, 0x6e, 0xb4, 0xf1,
	0x96, 0x46, 0xde, 0x16, 0x69, 0x3b, 0x9e, 0xd3, 0x63, 0x5f, 0xff, 0x6b, 0x1e, 0x66, 0x4d, 0x12,
	0xf8, 0xd4, 0x0b, 0xc8, 0x06, 0xed, 0x74, 0xa8, 0x87, 0xee, 0x43, 0x49, 0xd2, 0x59, 0x30, 0x96,
	0x8c, 0x7b, 0xd3, 0x6b, 0x68, 0x45, 0x72, 0x58, 0x61, 0xbe, 0xbd, 0xb2, 0x27, 0x76, 0x4c, 0x05,
	0x81, 0x1e, 0xc1, 0x0c, 0x23, 0x9f, 0x77, 0x49, 0xc0, 0x2d, 0xc7, 0x6b, 0xd3, 0x85, 0xbc, 0xc0,
	0xb8, 0x96, 0xc4, 0x30, 0xe5, 0xfe, 0xb6, 0xd7, 0xa6, 0xe6, 0x34, 0xeb, 0x7d, 0xa0, 0xdb, 0x50,
	0x3c, 0x22, 0xae, 0xbf, 0x50, 0x10, 0x38, 0xd5, 0x24, 0x4e, 0x93, 0xb8, 0xbe, 0x29, 0x76, 0xd1,
	0xbb, 0x00, 0x8c, 0x70, 0x76, 0x2a, 0xe9, 0x17, 0x05, 0xec, 0x95, 0x34, 0x7d, 0xce, 0x4e, 0x05,
	0xf5, 0x0a, 0x8b, 0x7e, 0x86, 0x58, 0x2d, 0x72, 0xd0, 0x3d, 0x94, 0x58, 0x53, 0x59, 0xac, 0xcd,
	0x70, 0x57, 0x62, 0xb5, 0xa2, 0x9f, 0x21, 0x96, 0xd4, 0xb0, 0xc0, 0x2a, 0x65, 0xb1, 0xb6, 0xc2,
	0x5d, 0x89, 0x45, 0xa2, 0x9f, 0x3b, 0xc5, 0xf2, 0xa5, 0x6a, 0xa3, 0xfe, 0xb5, 0x01, 0x73, 0x2f,
	0xba, 0x84, 0x9d, 0x9a, 0xb4, 0xcb, 0x89, 0x3a, 0x34, 0x5a, 0x83, 0x29, 0x4e, 0x7d, 0xc7, 0x56,
	0xaa, 0xbc, 0xbe, 0x92, 0xf5, 0x90, 0x15, 0x93, 0x04, 0xb4, 0xcb, 0x6c, 0x62, 0x4a, 0x50, 0xf4,
	0x01, 0x54, 0x88, 0xd7, 0xf2, 0xa9, 0xe3, 0xf1, 0x40, 0x29, 0xf4, 0x86, 0x0e, 0x6f, 0x2b, 0x02,
	0x32, 0x7b, 0xf0, 0x3b, 0xc5, 0x72, 0xa1, 0xda, 0xa8, 0xff, 0xda, 0x00, 0x94, 0x14, 0x46, 0xda,
	0x17, 0x3d, 0x82, 0x92, 0x2d, 0x6c, 0xac, 0xc4, 0xa9, 0x0f, 0x10, 0x27, 0xe1, 0x0d, 0xa6, 0xc2,
	0x40, 0x1f, 0x02, 0xf8, 0x98, 0x71, 0xe1, 0x3b, 0xa1, 0x58, 0x85, 0x41, 0x62, 0xed, 0x46, 0x50,
	0x66, 0x02, 0x41, 0xc9, 0xf5, 0x2b, 0x03, 0xd0, 0x1e, 0xf1, 0x5a, 0x4f, 0x49, 0x10, 0xe0, 0xc3,
	0x58, 0x4b, 0xef, 0xc1, 0xa5, 0x8e, 0x5c, 0x51, 0x82, 0xbd, 0xa9, 0x23, 0x1c, 0x21, 0x45, 0xb0,
	0xa1, 0xa2, 0x62, 0x0e, 0xc3, 0x14, 0xd5, 0x93, 0xa8, 0x07, 0xaf, 0x04, 0xfa, 0x9d, 0x01, 0xf3,
	0x29, 0x81, 0x26, 0xa0, 0xa9, 0x1b, 0x00, 0x4a, 0x42, 0xcb, 0x69, 0x09, 0xb9, 0x2a, 0x66, 0x45,
	0xad, 0x6c, 0xb7, 0xd0, 0x1d, 0x98, 0xe5, 0x0c, 0x7b, 0x01, 0xb6, 0x43, 0x39, 0x42, 0x90, 0x82,
	0x00, 0xb9, 0x9c, 0x58, 0xdd, 0x6e, 0xed, 0x14, 0xcb, 0xc5, 0x6a, 0xa3, 0xfe, 0x4f, 0x03, 0xae,
	0x0a, 0x43, 0x36, 0x82, 0xc0, 0x39, 0xf4, 0x3a, 0xc4, 0xe3, 0x17, 0x71, 0xad, 0x35, 0x98, 0x3a,
	0x64, 0xb4, 0xeb, 0x2b, 0x6d, 0x8d, 0xc0, 0x11, 0xa0, 0xe8, 0x4d, 0xa8, 0xd8, 0xae, 0x43, 0x3c,
	0xde, 0x13, 0xb5, 0x2c, 0x17, 0xb6, 0x5b, 0x69, 0x5f, 0x2d, 0x9e, 0xd9, 0x57, 0xa7, 0xa4, 0x09,
	0xae, 0x65, 0x8e, 0x38, 0x01, 0x33, 0xfc, 0x18, 0xa6, 0x71, 0x4c, 0x31, 0xf2, 0xd8, 0x9b, 0x3a,
	0x02, 0x09, 0xc6, 0x49, 0x14, 0xe5, 0x22, 0xff, 0x28, 0xc2, 0x15, 0x93, 0xd8, 0xc4, 0x39, 0x26,
	0x7d, 0x6e, 0x1b, 0x6b, 0xd3, 0x38, 0xa7, 0x36, 0xf3, 0x59, 0x6d, 0xf6, 0x1c, 0xba, 0x70, 0x36,
	0x87, 0x46, 0x2f, 0x60, 0xae, 0xed, 0xb8, 0x9c, 0x30, 0x8b, 0x9c, 0xf8, 0x8c, 0x04, 0x41, 0x48,
	0x44, 0x9a, 0xe4, 0xb6, 0x8e, 0xc8, 0x63, 0x01, 0xbc, 0x15, 0xc3, 0x9a, 0xd5, 0x76, 0xdf, 0x0a,
	0x6a, 0xc2, 0xac, 0x4d, 0xbd, 0xa0, 0xdb, 0x21, 0x96, 0x4f, 0x5d, 0xc7, 0x3e, 0x15, 0x91, 0x74,
	0x76, 0xed, 0x96, 0x8e, 0xde, 0x86, 0x84, 0xdc, 0x15, 0x80, 0xe6, 0x65, 0x3b, 0xf9, 0x89, 0x3e,
	0x86, 0x05, 0x91, 0x77, 0xb0, 0xeb, 0xbc, 0x16, 0xd9, 0xcf, 0x8a, 0xd3, 0x9c, 0x8a, 0xb3, 0xb5,
	0x28, 0xce, 0x46, 0x89, 0x70, 0x65, 0x3f, 0x82, 0x30, 0xaf, 0xa5, 0x71, 0xe3, 0x8d, 0xf0, 0xaa,
	0x1d, 0x60, 0x6e, 0x1f, 0x59, 0x81, 0xf3, 0x9a, 0x2c, 0x5c, 0x5a, 0x32, 0xee, 0x4d, 0x99, 0x15,
	0xb1, 0xb2, 0xe7, 0xbc, 0x26, 0xa8, 0x09, 0xc8, 0xf1, 0x8e, 0x9d, 0xc0, 0x39, 0x70, 0x89, 0x15,
	0xe5, 0xdd, 0x85, 0xb2, 0xe0, 0xf7, 0x9d, 0x0c, 0xbf, 0x4d, 0x05, 0x60, 0xce, 0xc5, 0x48, 0xd1,
	0x12, 0xfa, 0x01, 0x00, 0xfe, 0x02, 0x3b, 0x5c, 0x88, 0xbd, 0x50, 0x19, 0x45, 0xa1, 0x22, 0x80,
	0x43, 0x39, 0x43, 0x83, 0xb7, 0x9d, 0x36, 0xb5, 0xda, 0x2e, 0x3e, 0x5c, 0x80, 0x25, 0xe3, 0x5e,
	0xd9, 0x2c, 0x87, 0x0b, 0x8f, 0x5d, 0x7c, 0xb8, 0x53, 0x2c, 0x4f, 0x57, 0x1b, 0xf5, 0x3f, 0xe4,
	0xe1, 0x6a, 0xbf, 0x87, 0x4d, 0xe0, 0x02, 0x7c, 0x1f, 0xca, 0x2a, 0xea, 0x44, 0xde, 0x3f, 0x34,
	0xac, 0xc6, 0xc0, 0x68, 0x1b, 0x50, 0x8b, 0xb8, 0xce, 0x31, 0x61, 0xa7, 0x09, 0x33, 0x15, 0x46,
	0x9a, 0x69, 0x2e, 0xc2, 0xea, 0x19, 0x48, 0x6f, 0x81, 0xe2, 0xd9, 0x2d, 0xa0, 0x82, 0xc5, 0xd7,
	0x79, 0x98, 0x6b, 0xd8, 0xaf, 0x26, 0x70, 0x11, 0xe3, 0xf0, 0x99, 0x1f, 0x3f, 0x7c, 0x0e, 0x0d,
	0x85, 0x77, 0x61, 0x96, 0x85, 0x46, 0xf4, 0xb9, 0x75, 0x84, 0xbd, 0x96, 0x4b, 0xc4, 0x31, 0x2b,
	0xcd, 0x9c, 0x79, 0x59, 0xad, 0x37, 0xc5, 0x32, 0x5a, 0x80, 0x12, 0x6d, 0xb7, 0x03, 0xc2, 0xc5,
	0x6d, 0x2a, 0x34, 0x73, 0xa6, 0xfa, 0xee, 0xcb, 0x1c, 0xa5, 0xbe, 0xcc, 0xb1, 0x5e, 0x86, 0x92,
	0xa4, 0xac, 0x4a, 0x8e, 0x97, 0x80, 0x92, 0xba, 0xb8, 0xb8, 0xcb, 0xec, 0x14, 0xcb, 0xf9, 0x6a,
	0xa3, 0xfe, 0x97, 0x3c, 0xa0, 0x67, 0xf8, 0xff, 0x53, 0xcb, 0x77, 0xf4, 0x5a, 0xee, 0xd7, 0x71,
	0x5a, 0x93, 0x53, 0xfd, 0x39, 0xf8, 0x6d, 0xa8, 0xc6, 0x1e, 0x8e, 0x39, 0x27, 0x1d, 0x9f, 0x0b,
	0x75, 0x4f, 0x99, 0x6f, 0x44, 0xeb, 0x0d, 0xb9, 0x8c, 0xd6, 0xe0, 0x4a, 0x07, 0x9f, 0x58, 0xfd,
	0xe0, 0x81, 0x8a, 0x36, 0xf3, 0x1d, 0x7c, 0xb2, 0x99, 0x46, 0x09, 0x13, 0x47, 0xb9, 0xda, 0xa8,
	0x7f, 0x02, 0xf3, 0x29, 0x2d, 0x4e, 0xcc, 0x3e, 0xdf, 0xe4, 0x61, 0xf9, 0x31, 0x65, 0x5f, 0x60,
	0x16, 0xd5, 0x2d, 0xfb, 0x74, 0x93, 0xe0, 0xd6, 0x13, 0xc2, 0x39, 0x61, 0x2f, 0xba, 0xa4, 0xfb,
	0xad, 0xcd, 0xce, 0x69, 0xb3, 0x57, 0x70, 0x77, 0xa4, 0x66, 0x27, 0x66, 0xc7, 0xff, 0x18, 0x50,
	0x6d, 0x12, 0xcc, 0xf8, 0x01, 0xc1, 0x71, 0x59, 0x97, 0xd2, 0xa4, 0xd1, 0xa7, 0xc9, 0x8f, 0xe0,
	0xb2, 0xcf, 0x68, 0xab, 0x6b, 0x13, 0x66, 0xb5, 0x30, 0xc7, 0xca, 0x44, 0x4b, 0xda, 0x22, 0x41,
	0x01, 0x6e, 0x62, 0x8e, 0x9b, 0x39, 0x73, 0xc6, 0x4f, 0x7c, 0x87, 0x84, 0x54, 0x82, 0x56, 0x84,
	0x0a, 0x83, 0x09, 0xa9, 0xc4, 0x1e, 0x13, 0xb2, 0x13, 0xdf, 0xe9, 0xf4, 0x56, 0x4c, 0xa7, 0xb7,
	0xf5, 0xcb, 0x30, 0xad, 0xce, 0x12, 0xf2, 0x50, 0x21, 0xfc, 0x63, 0x98, 0x4b, 0x1c, 0x7a, 0x62,
	0xca, 0xa4, 0x80, 0x9a, 0x04, 0xbb, 0xfc, 0x68, 0xe3, 0x88, 0xd8, 0xaf, 0x2e, 0xe2, 0xff, 0x8b,
	0xb1, 0xd4, 0x47, 0x34, 0xe0, 0xaa, 0x48, 0x03, 0xb9, 0xd4, 0xa4, 0x01, 0x57, 0x75, 0xe1, 0x27,
	0x30, 0x9f, 0x62, 0x38, 0xb1, 0x93, 0xfc, 0xb9, 0x00, 0x57, 0xb6, 0xbc, 0xd6, 0x7e, 0xaf, 0x1d,
	0xb8, 0xc8, 0x69, 0x26, 0xd2, 0x8d, 0x20, 0x2b, 0xec, 0xc2, 0x03, 0xea, 0x76, 0xe3, 0xfc, 0x3d,
	0xbb, 0xf6, 0xa3, 0x01, 0x85, 0x7e, 0x56, 0xf0, 0x95, 0xd4, 0x52, 0x44, 0xc6, 0x4c, 0x90, 0x44,
	0x4d, 0x28, 0x49, 0xb9, 0x55, 0x89, 0xf9, 0xce, 0xf8, 0xc4, 0xf7, 0xe4, 0x79, 0x15, 0x3e, 0x7a,
	0x0b, 0x42, 0xd9, 0x6d, 0x62, 0xd9, 0xd4, 0xe3, 0xe4, 0x84, 0xab, 0x3c, 0x3a, 0x23, 0x16, 0x37,
	0xe4, 0x5a, 0xfd, 0x01, 0x5c, 0xd1, 0xca, 0x84, 0x00, 0x4a, 0x1b, 0xcf, 0x9f, 0x3e, 0xdd, 0xde,
	0xaf, 0xe6, 0xd0, 0x0c, 0x94, 0xcd, 0xe7, 0x4f, 0x9e, 0xac, 0x37, 0x36, 0x7e, 0x52, 0x35, 0xea,
	0xcb, 0x50, 0x92, 0x9c, 0x04, 0xcc, 0x93, 0xed, 0xad, 0x67, 0x21, 0x4c, 0x15, 0x66, 0xf6, 0xb6,
	0xcc, 0x97, 0x5b, 0xa6, 0xb5, 0xd1, 0xdc, 0x0a, 0xe1, 0x54, 0x6e, 0xfe, 0x14, 0xae, 0xf6, 0x4b,
	0x3b, 0x31, 0x07, 0xf9, 0x5b, 0xd4, 0xdd, 0x3f, 0x17, 0x65, 0x43, 0xe4, 0x1d, 0xa9, 0xee, 0xc1,
	0x38, 0x63, 0xf7, 0xf0, 0x21, 0x94, 0x54, 0x89, 0x9f, 0x17, 0xfa, 0xbf, 0xa3, 0xc3, 0x4c, 0x30,
	0x55, 0x65, 0xbe, 0x42, 0x42, 0xef, 0x03, 0x84, 0x95, 0xa2, 0x25, 0x3a, 0xbb, 0x31, 0x4a, 0xc5,
	0x4a, 0x08, 0xbd, 0x1b, 0x02, 0xab, 0x46, 0x97, 0xc2, 0x7c, 0xea, 0x48, 0x13, 0xa8, 0x7f, 0xaf,
	0xc6, 0x75, 0x56, 0x78, 0xa4, 0x42, 0x54, 0x65, 0xa9, 0xeb, 0xfb, 0xaf, 0x3c, 0xa0, 0xdd, 0xae,
	0xeb, 0x4e, 0xa0, 0xc8, 0xb9, 0xc8, 0x1c, 0x22, 0x21, 0x65, 0x21, 0x29, 0x65, 0x5f, 0x6b, 0x53,
	0xec, 0x6f, 0x6d, 0xd2, 0x0d, 0xc9, 0xd4, 0x19, 0x1a, 0x12, 0x6d, 0x9f, 0x58, 0xba, 0x50, 0x9f,
	0x98, 0xca, 0x59, 0x97, 0xd2, 0x39, 0x4b, 0x25, 0xd6, 0x7f, 0x1b, 0x30, 0x9f, 0x52, 0xf7, 0x84,
	0x06, 0x2d, 0x8e, 0x67, 0xa5, 0x8c, 0x5c, 0xe9, 0x38, 0x9e, 0xf4, 0xa1, 0x30, 0x8e, 0x7b, 0xe4,
	0x84, 0x5b, 0x29, 0xf5, 0x42, 0xb8, 0xf4, 0xbc, 0x57, 0x6e, 0xe3, 0x93, 0x68, 0xbf, 0xa8, 0xf0,
	0xf1, 0x89, 0xda, 0x4e, 0xf6, 0x4f, 0x53, 0x67, 0xe8, 0x9f, 0x76, 0x8a, 0xe5, 0x52, 0xb5, 0x51,
	0x9f, 0x87, 0xe9, 0x67, 0x94, 0xfa, 0xa1, 0xcc, 0xd8, 0x0b, 0xd5, 0x60, 0x54, 0x1b, 0xf5, 0x0d,
	0xb8, 0xbe, 0xcb, 0x1c, 0x8f, 0xef, 0x1f, 0x31, 0x82, 0x5b, 0x7b, 0x1c, 0xdb, 0xaf, 0xf6, 0x65,
	0x5c, 0x12, 0x50, 0xa1, 0x48, 0xb6, 0xfc, 0xd9, 0x4b, 0xff, 0x15, 0xb5, 0x22, 0x74, 0x19, 0xde,
	0x7f, 0x06, 0x37, 0x4c, 0xe2, 0x53, 0x96, 0xa1, 0x12, 0x39, 0xf1, 0x70, 0x2a, 0xe8, 0x7b, 0x80,
	0xb8, 0xc0, 0xb4, 0x82, 0x10, 0xd5, 0x12, 0x91, 0x51, 0xa5, 0x86, 0x2a, 0xef, 0xa3, 0xa9, 0xae,
	0xcb, 0x01, 0xdc, 0x1c, 0xc4, 0x73, 0x62, 0x71, 0xed, 0xe7, 0xb0, 0xf8, 0x92, 0x30, 0xa7, 0x7d,
	0xaa, 0x54, 0x2a, 0x0b, 0x0f, 0x3f, 0x74, 0xe0, 0xf1, 0xf4, 0x93, 0x1c, 0x24, 0xe6, 0xc7, 0x1f,
	0x24, 0xaa, 0x23, 0x9e, 0xc0, 0x1d, 0x79, 0xc4, 0x2c, 0x7b, 0x93, 0x04, 0x5d, 0x97, 0x8f, 0xa9,
	0xde, 0xde, 0xfc, 0x3c, 0x3f, 0x6a, 0x7e, 0xae, 0x38, 0xff, 0x0c, 0x96, 0x47, 0x71, 0x9e, 0x98,
	0x92, 0xff, 0x64, 0xc0, 0x2d, 0x93, 0xd8, 0xf4, 0x98, 0xb0, 0xe7, 0xcc, 0x3f, 0xc2, 0x1e, 0x49,
	0x66, 0xa9, 0x48, 0xcf, 0x18, 0x6e, 0x52, 0xb5, 0x6b, 0x25, 0x2a, 0x01, 0xec, 0x5a, 0x67, 0x18,
	0xd4, 0x5e, 0xa7, 0x59, 0x06, 0x38, 0x8a, 0x00, 0x9a, 0xca, 0x23, 0xaf, 0x9f, 0x83, 0x86, 0x1a,
	0xfa, 0x2a, 0x8c, 0xd6, 0xd4, 0x75, 0x95, 0x7c, 0x63, 0x15, 0xcb, 0xef, 0x42, 0x49, 0x34, 0x27,
	0xd1, 0xf4, 0x63, 0x78, 0x2c, 0x57, 0xb0, 0x68, 0x0b, 0x66, 0xe3, 0x12, 0x5b, 0x66, 0x82, 0xc2,
	0xe8, 0x4c, 0x10, 0x36, 0xf9, 0x11, 0xd6, 0x47, 0x22, 0x27, 0x6c, 0xc5, 0xa3, 0xb3, 0x88, 0x4c,
	0x71, 0x3c, 0x32, 0x11, 0x96, 0x20, 0xb3, 0x7e, 0x49, 0xa5, 0x23, 0x55, 0x3b, 0xff, 0xb7, 0x00,
	0xf3, 0x29, 0x35, 0x28, 0xb7, 0xd8, 0x84, 0x19, 0x8f, 0x52, 0xdf, 0x52, 0x4e, 0xa8, 0x8c, 0xb3,
	0xa8, 0xe3, 0x95, 0x88, 0x49, 0xcd, 0x9c, 0x39, 0xed, 0xf5, 0x3e, 0xd1, 0x6b, 0x58, 0xf2, 0xc3,
	0xe0, 0x64, 0x65, 0xa3, 0x43, 0x4c, 0x59, 0xba, 0xf4, 0x3b, 0xfa, 0x86, 0x63, 0x70, 0x60, 0x6b,
	0xe6, 0xcc, 0xeb, 0xfe, 0xb0, 0xc0, 0xf7, 0xa5, 0x01, 0xf5, 0x63, 0x71, 0xf9, 0x23, 0x0f, 0xb3,
	0xec, 0xde, 0x2d, 0x88, 0xd9, 0x4b, 0x5b, 0x3c, 0xd4, 0xb1, 0x1f, 0x11, 0x3a, 0x9a, 0x39, 0x73,
	0xf1, 0x78, 0x44, 0x74, 0xf9, 0xa5, 0x01, 0xb7, 0x99, 0xbc, 0x1b, 0x96, 0xce, 0xfd, 0x63, 0x31,
	0xa4, 0x2d, 0xdf, 0xd3, 0xdb, 0x72, 0xc4, 0xdd, 0x6a, 0xe6, 0xcc, 0x5b, 0x6c, 0x14, 0xd0, 0x7a,
	0x09, 0x8a, 0xfc, 0xd4, 0x27, 0xca, 0xee, 0x7f, 0x37, 0xe0, 0xe6, 0x33, 0xca, 0x9d, 0xf6, 0xe9,
	0x86, 0xf0, 0xee, 0x7d, 0xc2, 0x3a, 0x8e, 0x87, 0x93, 0xbd, 0x41, 0xd6, 0x6f, 0x8d, 0xc9, 0xf8,
	0x6d, 0xfe, 0x1c, 0x7e, 0x3b, 0x74, 0x1e, 0x90, 0x74, 0xea, 0xb0, 0xf4, 0xb3, 0x61, 0x71, 0xe0,
	0xd9, 0x26, 0x15, 0xf6, 0xd6, 0xbe, 0x9c, 0x85, 0xaa, 0x34, 0xbc, 0xe3, 0x1d, 0xee, 0xc9, 0x57,
	0x5b, 0xf4, 0x19, 0x40, 0xef, 0x95, 0x0c, 0x0d, 0x2e, 0x79, 0x93, 0x4f, 0x7a, 0xb5, 0xe5, 0x51,
	0x60, 0x52, 0x8a, 0x7a, 0x0e, 0x7d, 0x0a, 0x95, 0xb8, 0xd3, 0x45, 0xda, 0xda, 0xaa, 0xbf, 0xfb,
	0xaf, 0xdd, 0x19, 0x01, 0x15, 0xd3, 0xfe, 0x29, 0x4c, 0x27, 0xba, 0x4f, 0xb4, 0x3c, 0x00, 0xaf,
	0xaf, 0x1f, 0xae, 0xdd, 0x1d, 0x09, 0x97, 0xe4, 0x90, 0x78, 0x19, 0xd3, 0x73, 0xc8, 0xbe, 0xe5,
	0xe9, 0x39, 0x68, 0x9e, 0xd8, 0xea, 0x39, 0xe4, 0xc2, 0x1b, 0x7d, 0x0f, 0x3f, 0xe8, 0xfe, 0x40,
	0xe5, 0x66, 0x1e, 0xc0, 0x6a, 0xdf, 0x1d, 0x0b, 0x36, 0xe6, 0xe6, 0xc0, 0x6c, 0x7a, 0xc8, 0x8e,
	0xde, 0x1e, 0x70, 0x7f, 0xb3, 0x4f, 0x3d, 0xb5, 0xfb, 0xe3, 0x80, 0xc6, 0xac, 0x3e, 0x03, 0xe8,
	0x0d, 0x66, 0xf5, 0x7e, 0x95, 0x19, 0x62, 0xeb, 0xfd, 0x2a, 0x3b, 0xdf, 0x95, 0x96, 0x49, 0x0c,
	0x16, 0xf5, 0x96, 0xc9, 0xce, 0x6f, 0xf5, 0x96, 0xd1, 0x4c, 0x28, 0xeb, 0x39, 0xf4, 0x5b, 0x03,
	0x16, 0x47, 0xcc, 0xc1, 0xd0, 0x23, 0x6d, 0xb3, 0x30, 0xd6, 0x58, 0xb2, 0xf6, 0xc1, 0xb9, 0x70,
	0x93, 0xa6, 0x4c, 0x37, 0xd7, 0x7a, 0x53, 0x6a, 0xc7, 0x05, 0x7a, 0x53, 0xea, 0x7b, 0x75, 0xa9,
	0xeb, 0x44, 0x5f, 0x8a, 0x96, 0x47, 0xb4, 0xc5, 0x43, 0x75, 0xad, 0x69, 0x70, 0x25, 0x87, 0x44,
	0x63, 0xa4, 0xe7, 0x90, 0x6d, 0x54, 0xf5, 0x1c, 0x34, 0x1d, 0x96, 0xe2, 0xd0, 0x2b, 0x1a, 0x06,
	0x70, 0xc8, 0x14, 0x57, 0x03, 0x38, 0x64, 0xab, 0x8f, 0x7a, 0x0e, 0xfd, 0xc2, 0x80, 0xab, 0xfa,
	0xf6, 0x00, 0x3d, 0xd0, 0xdf, 0x9c, 0x21, 0xed, 0x4b, 0x6d, 0xed, 0x2c, 0x28, 0xb1, 0x0c, 0xbf,
	0x31, 0xa2, 0x16, 0x65, 0x50, 0x15, 0x8d, 0xde, 0x1f, 0x4c, 0x78, 0x44, 0xcd, 0x5f, 0x7b, 0x74,
	0x1e, 0xd4, 0x58, 0xb6, 0xaf, 0x0c, 0xb8, 0x36, 0x20, 0xc7, 0xa1, 0x35, 0x7d, 0x95, 0x36, 0x2c,
	0xd9, 0xd7, 0x1e, 0x9e, 0x09, 0x27, 0x12, 0x63, 0xfd, 0x87, 0xa0, 0xf9, 0x87, 0xd2, 0x7a, 0xe5,
	0xe9, 0x0b, 0x95, 0x10, 0x77, 0x8d, 0xdf, 0x1b, 0xc6, 0x37, 0x86, 0xf1, 0xc7, 0xbc, 0x06, 0xee,
	0xa0, 0x24, 0xc6, 0x0a, 0x0f, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x3a, 0x60, 0x69, 0x08,
	0x25, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessagingServiceClient is the client API for MessagingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessagingServiceClient interface {
	// Queries the route entries of the requested topic in the perspective of the
	// given endpoints. On success, servers should return a collection of
	// addressable partitions. Note servers may return customized route entries
	// based on endpoints provided.
	//
	// If the requested topic doesn't exist, returns `NOT_FOUND`.
	// If the specific endpoints is empty, returns `INVALID_ARGUMENT`.
	QueryRoute(ctx context.Context, in *QueryRouteRequest, opts ...grpc.CallOption) (*QueryRouteResponse, error)
	// Producer or consumer sends HeartbeatRequest to servers periodically to
	// keep-alive. Additionally, it also reports client-side configuration,
	// including topic subscription, load-balancing group name, etc.
	//
	// Returns `OK` if success.
	//
	// If a client specifies a language that is not yet supported by servers,
	// returns `INVALID_ARGUMENT`
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	// Checks the health status of message server, returns `OK` if services are
	// online and serving. Clients may use this RPC to detect availability of
	// messaging service, and take isolation actions when necessary.
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Delivers messages to brokers.
	// Clients may further:
	// 1. Refine a message destination to topic partition which fulfills parts of
	// FIFO semantic;
	// 2. Flag a message as transactional, which keeps it invisible to consumers
	// until it commits;
	// 3. Time a message, making it invisible to consumers till specified
	// time-point;
	// 4. And more...
	//
	// Returns message-id or transaction-id with status `OK` on success.
	//
	// If the destination topic doesn't exist, returns `NOT_FOUND`.
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// Queries the assigned partition route info of a topic for current consumer,
	// the returned assignment result is decided by server-side load balancer.
	//
	// If the corresponding topic doesn't exist, returns `NOT_FOUND`.
	// If the specific endpoints is empty, returns `INVALID_ARGUMENT`.
	QueryAssignment(ctx context.Context, in *QueryAssignmentRequest, opts ...grpc.CallOption) (*QueryAssignmentResponse, error)
	// Receives messages from the server in batch manner, returns a batch of
	// messages if success. The received messages should be ACKed or NACKed after
	// processing.
	//
	// If the pending concurrent receive requests exceed the quota of the given
	// consumer group, returns `UNAVAILABLE`. If the upstream store server hangs,
	// return `DEADLINE_EXCEEDED` in a timely manner. If the corresponding topic
	// or consumer group doesn't exist, returns `NOT_FOUND`. If there is no new
	// message in the specific topic, returns `OK` with an empty message set.
	// Please note that client may suffer from false empty responses.
	ReceiveMessage(ctx context.Context, in *ReceiveMessageRequest, opts ...grpc.CallOption) (*ReceiveMessageResponse, error)
	// Acknowledges the message associated with the `receipt_handle` or `offset`
	// in the `AckMessageRequest`, it means the message has been successfully
	// processed. Returns `OK` if the message server remove the relevant message
	// successfully.
	//
	// If the given receipt_handle is illegal or out of date, returns
	// `INVALID_ARGUMENT`.
	AckMessage(ctx context.Context, in *AckMessageRequest, opts ...grpc.CallOption) (*AckMessageResponse, error)
	// Signals that the message has not been successfully processed. The message
	// server should resend the message follow the retry policy defined at
	// server-side.
	//
	// If the corresponding topic or consumer group doesn't exist, returns
	// `NOT_FOUND`.
	NackMessage(ctx context.Context, in *NackMessageRequest, opts ...grpc.CallOption) (*NackMessageResponse, error)
	// Forwards one message to dead letter queue if the DeadLetterPolicy is
	// triggered by this message at client-side, return `OK` if success.
	ForwardMessageToDeadLetterQueue(ctx context.Context, in *ForwardMessageToDeadLetterQueueRequest, opts ...grpc.CallOption) (*ForwardMessageToDeadLetterQueueResponse, error)
	// Commits or rollback one transactional message.
	EndTransaction(ctx context.Context, in *EndTransactionRequest, opts ...grpc.CallOption) (*EndTransactionResponse, error)
	// Queries the offset of the specific partition, returns the offset with `OK`
	// if success. The message server should maintain a numerical offset for each
	// message in a partition.
	QueryOffset(ctx context.Context, in *QueryOffsetRequest, opts ...grpc.CallOption) (*QueryOffsetResponse, error)
	// Pulls messages from the specific partition, returns a set of messages with
	// next pull offset. The pulled messages can't be ACKed or NACKed, while the
	// client is responsible for manage offsets for consumer, typically update
	// consume offset to local memory or a third-party storage service.
	//
	// If the pending concurrent receive requests exceed the quota of the given
	// consumer group, returns `UNAVAILABLE`. If the upstream store server hangs,
	// return `DEADLINE_EXCEEDED` in a timely manner. If the corresponding topic
	// or consumer group doesn't exist, returns `NOT_FOUND`. If there is no new
	// message in the specific topic, returns `OK` with an empty message set.
	// Please note that client may suffer from false empty responses.
	PullMessage(ctx context.Context, in *PullMessageRequest, opts ...grpc.CallOption) (*PullMessageResponse, error)
	// Multiplexing RPC(s) for various polling requests, which issue different
	// commands to client.
	//
	// Sometimes client may need to receive and process the command from server.
	// To prevent the complexity of streaming RPC(s), a unary RPC using
	// long-polling is another solution.
	//
	// To mark the request-response of corresponding command, `command_id` in
	// message is recorded in the subsequent RPC(s). For example, after receiving
	// command of printing thread stack trace, client would send
	// `ReportMessageConsumptionResultRequest` to server, which contain both of
	// the stack trace and `command_id`.
	//
	// At same time, `NoopCommand` is delivered from server when no new command is
	// needed, it is essential for client to maintain the ping-pong.
	//
	PollCommand(ctx context.Context, in *PollCommandRequest, opts ...grpc.CallOption) (*PollCommandResponse, error)
	// After receiving the corresponding polling command, the thread stack trace
	// is reported to the server.
	ReportThreadStackTrace(ctx context.Context, in *ReportThreadStackTraceRequest, opts ...grpc.CallOption) (*ReportThreadStackTraceResponse, error)
	// After receiving the corresponding polling command, the consumption result
	// of appointed message is reported to the server.
	ReportMessageConsumptionResult(ctx context.Context, in *ReportMessageConsumptionResultRequest, opts ...grpc.CallOption) (*ReportMessageConsumptionResultResponse, error)
	// Notify the server that the client is terminated.
	NotifyClientTermination(ctx context.Context, in *NotifyClientTerminationRequest, opts ...grpc.CallOption) (*NotifyClientTerminationResponse, error)
}

type messagingServiceClient struct {
	cc *grpc.ClientConn
}

func NewMessagingServiceClient(cc *grpc.ClientConn) MessagingServiceClient {
	return &messagingServiceClient{cc}
}

func (c *messagingServiceClient) QueryRoute(ctx context.Context, in *QueryRouteRequest, opts ...grpc.CallOption) (*QueryRouteResponse, error) {
	out := new(QueryRouteResponse)
	err := c.cc.Invoke(ctx, "/apache.rocketmq.v1.MessagingService/QueryRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/apache.rocketmq.v1.MessagingService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/apache.rocketmq.v1.MessagingService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, "/apache.rocketmq.v1.MessagingService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) QueryAssignment(ctx context.Context, in *QueryAssignmentRequest, opts ...grpc.CallOption) (*QueryAssignmentResponse, error) {
	out := new(QueryAssignmentResponse)
	err := c.cc.Invoke(ctx, "/apache.rocketmq.v1.MessagingService/QueryAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) ReceiveMessage(ctx context.Context, in *ReceiveMessageRequest, opts ...grpc.CallOption) (*ReceiveMessageResponse, error) {
	out := new(ReceiveMessageResponse)
	err := c.cc.Invoke(ctx, "/apache.rocketmq.v1.MessagingService/ReceiveMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) AckMessage(ctx context.Context, in *AckMessageRequest, opts ...grpc.CallOption) (*AckMessageResponse, error) {
	out := new(AckMessageResponse)
	err := c.cc.Invoke(ctx, "/apache.rocketmq.v1.MessagingService/AckMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) NackMessage(ctx context.Context, in *NackMessageRequest, opts ...grpc.CallOption) (*NackMessageResponse, error) {
	out := new(NackMessageResponse)
	err := c.cc.Invoke(ctx, "/apache.rocketmq.v1.MessagingService/NackMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) ForwardMessageToDeadLetterQueue(ctx context.Context, in *ForwardMessageToDeadLetterQueueRequest, opts ...grpc.CallOption) (*ForwardMessageToDeadLetterQueueResponse, error) {
	out := new(ForwardMessageToDeadLetterQueueResponse)
	err := c.cc.Invoke(ctx, "/apache.rocketmq.v1.MessagingService/ForwardMessageToDeadLetterQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) EndTransaction(ctx context.Context, in *EndTransactionRequest, opts ...grpc.CallOption) (*EndTransactionResponse, error) {
	out := new(EndTransactionResponse)
	err := c.cc.Invoke(ctx, "/apache.rocketmq.v1.MessagingService/EndTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) QueryOffset(ctx context.Context, in *QueryOffsetRequest, opts ...grpc.CallOption) (*QueryOffsetResponse, error) {
	out := new(QueryOffsetResponse)
	err := c.cc.Invoke(ctx, "/apache.rocketmq.v1.MessagingService/QueryOffset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) PullMessage(ctx context.Context, in *PullMessageRequest, opts ...grpc.CallOption) (*PullMessageResponse, error) {
	out := new(PullMessageResponse)
	err := c.cc.Invoke(ctx, "/apache.rocketmq.v1.MessagingService/PullMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) PollCommand(ctx context.Context, in *PollCommandRequest, opts ...grpc.CallOption) (*PollCommandResponse, error) {
	out := new(PollCommandResponse)
	err := c.cc.Invoke(ctx, "/apache.rocketmq.v1.MessagingService/PollCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) ReportThreadStackTrace(ctx context.Context, in *ReportThreadStackTraceRequest, opts ...grpc.CallOption) (*ReportThreadStackTraceResponse, error) {
	out := new(ReportThreadStackTraceResponse)
	err := c.cc.Invoke(ctx, "/apache.rocketmq.v1.MessagingService/ReportThreadStackTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) ReportMessageConsumptionResult(ctx context.Context, in *ReportMessageConsumptionResultRequest, opts ...grpc.CallOption) (*ReportMessageConsumptionResultResponse, error) {
	out := new(ReportMessageConsumptionResultResponse)
	err := c.cc.Invoke(ctx, "/apache.rocketmq.v1.MessagingService/ReportMessageConsumptionResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) NotifyClientTermination(ctx context.Context, in *NotifyClientTerminationRequest, opts ...grpc.CallOption) (*NotifyClientTerminationResponse, error) {
	out := new(NotifyClientTerminationResponse)
	err := c.cc.Invoke(ctx, "/apache.rocketmq.v1.MessagingService/NotifyClientTermination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessagingServiceServer is the server API for MessagingService service.
type MessagingServiceServer interface {
	// Queries the route entries of the requested topic in the perspective of the
	// given endpoints. On success, servers should return a collection of
	// addressable partitions. Note servers may return customized route entries
	// based on endpoints provided.
	//
	// If the requested topic doesn't exist, returns `NOT_FOUND`.
	// If the specific endpoints is empty, returns `INVALID_ARGUMENT`.
	QueryRoute(context.Context, *QueryRouteRequest) (*QueryRouteResponse, error)
	// Producer or consumer sends HeartbeatRequest to servers periodically to
	// keep-alive. Additionally, it also reports client-side configuration,
	// including topic subscription, load-balancing group name, etc.
	//
	// Returns `OK` if success.
	//
	// If a client specifies a language that is not yet supported by servers,
	// returns `INVALID_ARGUMENT`
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	// Checks the health status of message server, returns `OK` if services are
	// online and serving. Clients may use this RPC to detect availability of
	// messaging service, and take isolation actions when necessary.
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Delivers messages to brokers.
	// Clients may further:
	// 1. Refine a message destination to topic partition which fulfills parts of
	// FIFO semantic;
	// 2. Flag a message as transactional, which keeps it invisible to consumers
	// until it commits;
	// 3. Time a message, making it invisible to consumers till specified
	// time-point;
	// 4. And more...
	//
	// Returns message-id or transaction-id with status `OK` on success.
	//
	// If the destination topic doesn't exist, returns `NOT_FOUND`.
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	// Queries the assigned partition route info of a topic for current consumer,
	// the returned assignment result is decided by server-side load balancer.
	//
	// If the corresponding topic doesn't exist, returns `NOT_FOUND`.
	// If the specific endpoints is empty, returns `INVALID_ARGUMENT`.
	QueryAssignment(context.Context, *QueryAssignmentRequest) (*QueryAssignmentResponse, error)
	// Receives messages from the server in batch manner, returns a batch of
	// messages if success. The received messages should be ACKed or NACKed after
	// processing.
	//
	// If the pending concurrent receive requests exceed the quota of the given
	// consumer group, returns `UNAVAILABLE`. If the upstream store server hangs,
	// return `DEADLINE_EXCEEDED` in a timely manner. If the corresponding topic
	// or consumer group doesn't exist, returns `NOT_FOUND`. If there is no new
	// message in the specific topic, returns `OK` with an empty message set.
	// Please note that client may suffer from false empty responses.
	ReceiveMessage(context.Context, *ReceiveMessageRequest) (*ReceiveMessageResponse, error)
	// Acknowledges the message associated with the `receipt_handle` or `offset`
	// in the `AckMessageRequest`, it means the message has been successfully
	// processed. Returns `OK` if the message server remove the relevant message
	// successfully.
	//
	// If the given receipt_handle is illegal or out of date, returns
	// `INVALID_ARGUMENT`.
	AckMessage(context.Context, *AckMessageRequest) (*AckMessageResponse, error)
	// Signals that the message has not been successfully processed. The message
	// server should resend the message follow the retry policy defined at
	// server-side.
	//
	// If the corresponding topic or consumer group doesn't exist, returns
	// `NOT_FOUND`.
	NackMessage(context.Context, *NackMessageRequest) (*NackMessageResponse, error)
	// Forwards one message to dead letter queue if the DeadLetterPolicy is
	// triggered by this message at client-side, return `OK` if success.
	ForwardMessageToDeadLetterQueue(context.Context, *ForwardMessageToDeadLetterQueueRequest) (*ForwardMessageToDeadLetterQueueResponse, error)
	// Commits or rollback one transactional message.
	EndTransaction(context.Context, *EndTransactionRequest) (*EndTransactionResponse, error)
	// Queries the offset of the specific partition, returns the offset with `OK`
	// if success. The message server should maintain a numerical offset for each
	// message in a partition.
	QueryOffset(context.Context, *QueryOffsetRequest) (*QueryOffsetResponse, error)
	// Pulls messages from the specific partition, returns a set of messages with
	// next pull offset. The pulled messages can't be ACKed or NACKed, while the
	// client is responsible for manage offsets for consumer, typically update
	// consume offset to local memory or a third-party storage service.
	//
	// If the pending concurrent receive requests exceed the quota of the given
	// consumer group, returns `UNAVAILABLE`. If the upstream store server hangs,
	// return `DEADLINE_EXCEEDED` in a timely manner. If the corresponding topic
	// or consumer group doesn't exist, returns `NOT_FOUND`. If there is no new
	// message in the specific topic, returns `OK` with an empty message set.
	// Please note that client may suffer from false empty responses.
	PullMessage(context.Context, *PullMessageRequest) (*PullMessageResponse, error)
	// Multiplexing RPC(s) for various polling requests, which issue different
	// commands to client.
	//
	// Sometimes client may need to receive and process the command from server.
	// To prevent the complexity of streaming RPC(s), a unary RPC using
	// long-polling is another solution.
	//
	// To mark the request-response of corresponding command, `command_id` in
	// message is recorded in the subsequent RPC(s). For example, after receiving
	// command of printing thread stack trace, client would send
	// `ReportMessageConsumptionResultRequest` to server, which contain both of
	// the stack trace and `command_id`.
	//
	// At same time, `NoopCommand` is delivered from server when no new command is
	// needed, it is essential for client to maintain the ping-pong.
	//
	PollCommand(context.Context, *PollCommandRequest) (*PollCommandResponse, error)
	// After receiving the corresponding polling command, the thread stack trace
	// is reported to the server.
	ReportThreadStackTrace(context.Context, *ReportThreadStackTraceRequest) (*ReportThreadStackTraceResponse, error)
	// After receiving the corresponding polling command, the consumption result
	// of appointed message is reported to the server.
	ReportMessageConsumptionResult(context.Context, *ReportMessageConsumptionResultRequest) (*ReportMessageConsumptionResultResponse, error)
	// Notify the server that the client is terminated.
	NotifyClientTermination(context.Context, *NotifyClientTerminationRequest) (*NotifyClientTerminationResponse, error)
}

// UnimplementedMessagingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMessagingServiceServer struct {
}

func (*UnimplementedMessagingServiceServer) QueryRoute(ctx context.Context, req *QueryRouteRequest) (*QueryRouteResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method QueryRoute not implemented")
}
func (*UnimplementedMessagingServiceServer) Heartbeat(ctx context.Context, req *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (*UnimplementedMessagingServiceServer) HealthCheck(ctx context.Context, req *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedMessagingServiceServer) SendMessage(ctx context.Context, req *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (*UnimplementedMessagingServiceServer) QueryAssignment(ctx context.Context, req *QueryAssignmentRequest) (*QueryAssignmentResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method QueryAssignment not implemented")
}
func (*UnimplementedMessagingServiceServer) ReceiveMessage(ctx context.Context, req *ReceiveMessageRequest) (*ReceiveMessageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ReceiveMessage not implemented")
}
func (*UnimplementedMessagingServiceServer) AckMessage(ctx context.Context, req *AckMessageRequest) (*AckMessageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method AckMessage not implemented")
}
func (*UnimplementedMessagingServiceServer) NackMessage(ctx context.Context, req *NackMessageRequest) (*NackMessageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method NackMessage not implemented")
}
func (*UnimplementedMessagingServiceServer) ForwardMessageToDeadLetterQueue(ctx context.Context, req *ForwardMessageToDeadLetterQueueRequest) (*ForwardMessageToDeadLetterQueueResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ForwardMessageToDeadLetterQueue not implemented")
}
func (*UnimplementedMessagingServiceServer) EndTransaction(ctx context.Context, req *EndTransactionRequest) (*EndTransactionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method EndTransaction not implemented")
}
func (*UnimplementedMessagingServiceServer) QueryOffset(ctx context.Context, req *QueryOffsetRequest) (*QueryOffsetResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method QueryOffset not implemented")
}
func (*UnimplementedMessagingServiceServer) PullMessage(ctx context.Context, req *PullMessageRequest) (*PullMessageResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PullMessage not implemented")
}
func (*UnimplementedMessagingServiceServer) PollCommand(ctx context.Context, req *PollCommandRequest) (*PollCommandResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PollCommand not implemented")
}
func (*UnimplementedMessagingServiceServer) ReportThreadStackTrace(ctx context.Context, req *ReportThreadStackTraceRequest) (*ReportThreadStackTraceResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ReportThreadStackTrace not implemented")
}
func (*UnimplementedMessagingServiceServer) ReportMessageConsumptionResult(ctx context.Context, req *ReportMessageConsumptionResultRequest) (*ReportMessageConsumptionResultResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ReportMessageConsumptionResult not implemented")
}
func (*UnimplementedMessagingServiceServer) NotifyClientTermination(ctx context.Context, req *NotifyClientTerminationRequest) (*NotifyClientTerminationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method NotifyClientTermination not implemented")
}

func RegisterMessagingServiceServer(s *grpc.Server, srv MessagingServiceServer) {
	s.RegisterService(&_MessagingService_serviceDesc, srv)
}

func _MessagingService_QueryRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).QueryRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apache.rocketmq.v1.MessagingService/QueryRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).QueryRoute(ctx, req.(*QueryRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apache.rocketmq.v1.MessagingService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apache.rocketmq.v1.MessagingService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apache.rocketmq.v1.MessagingService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_QueryAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).QueryAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apache.rocketmq.v1.MessagingService/QueryAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).QueryAssignment(ctx, req.(*QueryAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_ReceiveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).ReceiveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apache.rocketmq.v1.MessagingService/ReceiveMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).ReceiveMessage(ctx, req.(*ReceiveMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_AckMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).AckMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apache.rocketmq.v1.MessagingService/AckMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).AckMessage(ctx, req.(*AckMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_NackMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NackMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).NackMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apache.rocketmq.v1.MessagingService/NackMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).NackMessage(ctx, req.(*NackMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_ForwardMessageToDeadLetterQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardMessageToDeadLetterQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).ForwardMessageToDeadLetterQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apache.rocketmq.v1.MessagingService/ForwardMessageToDeadLetterQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).ForwardMessageToDeadLetterQueue(ctx, req.(*ForwardMessageToDeadLetterQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_EndTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).EndTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apache.rocketmq.v1.MessagingService/EndTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).EndTransaction(ctx, req.(*EndTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_QueryOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOffsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).QueryOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apache.rocketmq.v1.MessagingService/QueryOffset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).QueryOffset(ctx, req.(*QueryOffsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_PullMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).PullMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apache.rocketmq.v1.MessagingService/PullMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).PullMessage(ctx, req.(*PullMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_PollCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).PollCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apache.rocketmq.v1.MessagingService/PollCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).PollCommand(ctx, req.(*PollCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_ReportThreadStackTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportThreadStackTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).ReportThreadStackTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apache.rocketmq.v1.MessagingService/ReportThreadStackTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).ReportThreadStackTrace(ctx, req.(*ReportThreadStackTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_ReportMessageConsumptionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportMessageConsumptionResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).ReportMessageConsumptionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apache.rocketmq.v1.MessagingService/ReportMessageConsumptionResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).ReportMessageConsumptionResult(ctx, req.(*ReportMessageConsumptionResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_NotifyClientTermination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyClientTerminationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).NotifyClientTermination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apache.rocketmq.v1.MessagingService/NotifyClientTermination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).NotifyClientTermination(ctx, req.(*NotifyClientTerminationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessagingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apache.rocketmq.v1.MessagingService",
	HandlerType: (*MessagingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryRoute",
			Handler:    _MessagingService_QueryRoute_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _MessagingService_Heartbeat_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _MessagingService_HealthCheck_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _MessagingService_SendMessage_Handler,
		},
		{
			MethodName: "QueryAssignment",
			Handler:    _MessagingService_QueryAssignment_Handler,
		},
		{
			MethodName: "ReceiveMessage",
			Handler:    _MessagingService_ReceiveMessage_Handler,
		},
		{
			MethodName: "AckMessage",
			Handler:    _MessagingService_AckMessage_Handler,
		},
		{
			MethodName: "NackMessage",
			Handler:    _MessagingService_NackMessage_Handler,
		},
		{
			MethodName: "ForwardMessageToDeadLetterQueue",
			Handler:    _MessagingService_ForwardMessageToDeadLetterQueue_Handler,
		},
		{
			MethodName: "EndTransaction",
			Handler:    _MessagingService_EndTransaction_Handler,
		},
		{
			MethodName: "QueryOffset",
			Handler:    _MessagingService_QueryOffset_Handler,
		},
		{
			MethodName: "PullMessage",
			Handler:    _MessagingService_PullMessage_Handler,
		},
		{
			MethodName: "PollCommand",
			Handler:    _MessagingService_PollCommand_Handler,
		},
		{
			MethodName: "ReportThreadStackTrace",
			Handler:    _MessagingService_ReportThreadStackTrace_Handler,
		},
		{
			MethodName: "ReportMessageConsumptionResult",
			Handler:    _MessagingService_ReportMessageConsumptionResult_Handler,
		},
		{
			MethodName: "NotifyClientTermination",
			Handler:    _MessagingService_NotifyClientTermination_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apache/rocketmq/v1/service.proto",
}
