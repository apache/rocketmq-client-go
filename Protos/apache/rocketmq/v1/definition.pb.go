// Code generated by protoc-gen-go. DO NOT EDIT.
// source: apache/rocketmq/v1/definition.proto

package apache_rocketmq_v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Permission int32

const (
	Permission_NONE       Permission = 0
	Permission_READ       Permission = 1
	Permission_WRITE      Permission = 2
	Permission_READ_WRITE Permission = 3
)

var Permission_name = map[int32]string{
	0: "NONE",
	1: "READ",
	2: "WRITE",
	3: "READ_WRITE",
}

var Permission_value = map[string]int32{
	"NONE":       0,
	"READ":       1,
	"WRITE":      2,
	"READ_WRITE": 3,
}

func (x Permission) String() string {
	return proto.EnumName(Permission_name, int32(x))
}

func (Permission) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{0}
}

type FilterType int32

const (
	FilterType_TAG FilterType = 0
	FilterType_SQL FilterType = 1
)

var FilterType_name = map[int32]string{
	0: "TAG",
	1: "SQL",
}

var FilterType_value = map[string]int32{
	"TAG": 0,
	"SQL": 1,
}

func (x FilterType) String() string {
	return proto.EnumName(FilterType_name, int32(x))
}

func (FilterType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{1}
}

type ConsumeModel int32

const (
	ConsumeModel_CLUSTERING   ConsumeModel = 0
	ConsumeModel_BROADCASTING ConsumeModel = 1
)

var ConsumeModel_name = map[int32]string{
	0: "CLUSTERING",
	1: "BROADCASTING",
}

var ConsumeModel_value = map[string]int32{
	"CLUSTERING":   0,
	"BROADCASTING": 1,
}

func (x ConsumeModel) String() string {
	return proto.EnumName(ConsumeModel_name, int32(x))
}

func (ConsumeModel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{2}
}

type ConsumePolicy int32

const (
	ConsumePolicy_RESUME           ConsumePolicy = 0
	ConsumePolicy_PLAYBACK         ConsumePolicy = 1
	ConsumePolicy_DISCARD          ConsumePolicy = 2
	ConsumePolicy_TARGET_TIMESTAMP ConsumePolicy = 3
)

var ConsumePolicy_name = map[int32]string{
	0: "RESUME",
	1: "PLAYBACK",
	2: "DISCARD",
	3: "TARGET_TIMESTAMP",
}

var ConsumePolicy_value = map[string]int32{
	"RESUME":           0,
	"PLAYBACK":         1,
	"DISCARD":          2,
	"TARGET_TIMESTAMP": 3,
}

func (x ConsumePolicy) String() string {
	return proto.EnumName(ConsumePolicy_name, int32(x))
}

func (ConsumePolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{3}
}

type ConsumeMessageType int32

const (
	ConsumeMessageType_ACTIVE  ConsumeMessageType = 0
	ConsumeMessageType_PASSIVE ConsumeMessageType = 1
)

var ConsumeMessageType_name = map[int32]string{
	0: "ACTIVE",
	1: "PASSIVE",
}

var ConsumeMessageType_value = map[string]int32{
	"ACTIVE":  0,
	"PASSIVE": 1,
}

func (x ConsumeMessageType) String() string {
	return proto.EnumName(ConsumeMessageType_name, int32(x))
}

func (ConsumeMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{4}
}

type AddressScheme int32

const (
	AddressScheme_IPv4        AddressScheme = 0
	AddressScheme_IPv6        AddressScheme = 1
	AddressScheme_DOMAIN_NAME AddressScheme = 2
)

var AddressScheme_name = map[int32]string{
	0: "IPv4",
	1: "IPv6",
	2: "DOMAIN_NAME",
}

var AddressScheme_value = map[string]int32{
	"IPv4":        0,
	"IPv6":        1,
	"DOMAIN_NAME": 2,
}

func (x AddressScheme) String() string {
	return proto.EnumName(AddressScheme_name, int32(x))
}

func (AddressScheme) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{5}
}

type MessageType int32

const (
	MessageType_NORMAL MessageType = 0
	// Sequenced message
	MessageType_FIFO MessageType = 1
	// Messages that are delivered after the specified duration.
	MessageType_DELAY MessageType = 2
	// Messages that are transactional. Only committed messages are delivered to
	// subscribers.
	MessageType_TRANSACTION MessageType = 3
)

var MessageType_name = map[int32]string{
	0: "NORMAL",
	1: "FIFO",
	2: "DELAY",
	3: "TRANSACTION",
}

var MessageType_value = map[string]int32{
	"NORMAL":      0,
	"FIFO":        1,
	"DELAY":       2,
	"TRANSACTION": 3,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{6}
}

type DigestType int32

const (
	// CRC algorithm achieves goal of detecting random data error with lowest
	// computation overhead.
	DigestType_CRC32 DigestType = 0
	// MD5 algorithm achieves good balance between collision rate and computation
	// overhead.
	DigestType_MD5 DigestType = 1
	// SHA-family has substantially fewer collision with fair amount of
	// computation.
	DigestType_SHA1 DigestType = 2
)

var DigestType_name = map[int32]string{
	0: "CRC32",
	1: "MD5",
	2: "SHA1",
}

var DigestType_value = map[string]int32{
	"CRC32": 0,
	"MD5":   1,
	"SHA1":  2,
}

func (x DigestType) String() string {
	return proto.EnumName(DigestType_name, int32(x))
}

func (DigestType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{7}
}

type Encoding int32

const (
	Encoding_IDENTITY Encoding = 0
	Encoding_GZIP     Encoding = 1
)

var Encoding_name = map[int32]string{
	0: "IDENTITY",
	1: "GZIP",
}

var Encoding_value = map[string]int32{
	"IDENTITY": 0,
	"GZIP":     1,
}

func (x Encoding) String() string {
	return proto.EnumName(Encoding_name, int32(x))
}

func (Encoding) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{8}
}

type QueryOffsetPolicy int32

const (
	// Use this option if client wishes to playback all existing messages.
	QueryOffsetPolicy_BEGINNING QueryOffsetPolicy = 0
	// Use this option if client wishes to skip all existing messages.
	QueryOffsetPolicy_END QueryOffsetPolicy = 1
	// Use this option if time-based seek is targeted.
	QueryOffsetPolicy_TIME_POINT QueryOffsetPolicy = 2
)

var QueryOffsetPolicy_name = map[int32]string{
	0: "BEGINNING",
	1: "END",
	2: "TIME_POINT",
}

var QueryOffsetPolicy_value = map[string]int32{
	"BEGINNING":  0,
	"END":        1,
	"TIME_POINT": 2,
}

func (x QueryOffsetPolicy) String() string {
	return proto.EnumName(QueryOffsetPolicy_name, int32(x))
}

func (QueryOffsetPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{9}
}

type FilterExpression struct {
	Type                 FilterType `protobuf:"varint,1,opt,name=type,proto3,enum=apache.rocketmq.v1.FilterType" json:"type,omitempty"`
	Expression           string     `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *FilterExpression) Reset()         { *m = FilterExpression{} }
func (m *FilterExpression) String() string { return proto.CompactTextString(m) }
func (*FilterExpression) ProtoMessage()    {}
func (*FilterExpression) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{0}
}

func (m *FilterExpression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilterExpression.Unmarshal(m, b)
}
func (m *FilterExpression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilterExpression.Marshal(b, m, deterministic)
}
func (m *FilterExpression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterExpression.Merge(m, src)
}
func (m *FilterExpression) XXX_Size() int {
	return xxx_messageInfo_FilterExpression.Size(m)
}
func (m *FilterExpression) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterExpression.DiscardUnknown(m)
}

var xxx_messageInfo_FilterExpression proto.InternalMessageInfo

func (m *FilterExpression) GetType() FilterType {
	if m != nil {
		return m.Type
	}
	return FilterType_TAG
}

func (m *FilterExpression) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

// Dead lettering is done on a best effort basis. The same message might be
// dead lettered multiple times.
//
// If validation on any of the fields fails at subscription creation/update,
// the create/update subscription request will fail.
type DeadLetterPolicy struct {
	// The maximum number of delivery attempts for any message.
	//
	// This field will be honored on a best effort basis.
	//
	// If this parameter is 0, a default value of 16 is used.
	MaxDeliveryAttempts  int32    `protobuf:"varint,1,opt,name=max_delivery_attempts,json=maxDeliveryAttempts,proto3" json:"max_delivery_attempts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeadLetterPolicy) Reset()         { *m = DeadLetterPolicy{} }
func (m *DeadLetterPolicy) String() string { return proto.CompactTextString(m) }
func (*DeadLetterPolicy) ProtoMessage()    {}
func (*DeadLetterPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{1}
}

func (m *DeadLetterPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeadLetterPolicy.Unmarshal(m, b)
}
func (m *DeadLetterPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeadLetterPolicy.Marshal(b, m, deterministic)
}
func (m *DeadLetterPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeadLetterPolicy.Merge(m, src)
}
func (m *DeadLetterPolicy) XXX_Size() int {
	return xxx_messageInfo_DeadLetterPolicy.Size(m)
}
func (m *DeadLetterPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_DeadLetterPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_DeadLetterPolicy proto.InternalMessageInfo

func (m *DeadLetterPolicy) GetMaxDeliveryAttempts() int32 {
	if m != nil {
		return m.MaxDeliveryAttempts
	}
	return 0
}

type Resource struct {
	ResourceNamespace string `protobuf:"bytes,1,opt,name=resource_namespace,json=resourceNamespace,proto3" json:"resource_namespace,omitempty"`
	// Resource name identifier, which remains unique within the abstract resource
	// namespace.
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{2}
}

func (m *Resource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resource.Unmarshal(m, b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return xxx_messageInfo_Resource.Size(m)
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func (m *Resource) GetResourceNamespace() string {
	if m != nil {
		return m.ResourceNamespace
	}
	return ""
}

func (m *Resource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ProducerData struct {
	Group                *Resource `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ProducerData) Reset()         { *m = ProducerData{} }
func (m *ProducerData) String() string { return proto.CompactTextString(m) }
func (*ProducerData) ProtoMessage()    {}
func (*ProducerData) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{3}
}

func (m *ProducerData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProducerData.Unmarshal(m, b)
}
func (m *ProducerData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProducerData.Marshal(b, m, deterministic)
}
func (m *ProducerData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProducerData.Merge(m, src)
}
func (m *ProducerData) XXX_Size() int {
	return xxx_messageInfo_ProducerData.Size(m)
}
func (m *ProducerData) XXX_DiscardUnknown() {
	xxx_messageInfo_ProducerData.DiscardUnknown(m)
}

var xxx_messageInfo_ProducerData proto.InternalMessageInfo

func (m *ProducerData) GetGroup() *Resource {
	if m != nil {
		return m.Group
	}
	return nil
}

type ConsumerData struct {
	Group                *Resource            `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Subscriptions        []*SubscriptionEntry `protobuf:"bytes,2,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	ConsumeModel         ConsumeModel         `protobuf:"varint,3,opt,name=consume_model,json=consumeModel,proto3,enum=apache.rocketmq.v1.ConsumeModel" json:"consume_model,omitempty"`
	ConsumePolicy        ConsumePolicy        `protobuf:"varint,4,opt,name=consume_policy,json=consumePolicy,proto3,enum=apache.rocketmq.v1.ConsumePolicy" json:"consume_policy,omitempty"`
	DeadLetterPolicy     *DeadLetterPolicy    `protobuf:"bytes,5,opt,name=dead_letter_policy,json=deadLetterPolicy,proto3" json:"dead_letter_policy,omitempty"`
	ConsumeType          ConsumeMessageType   `protobuf:"varint,6,opt,name=consume_type,json=consumeType,proto3,enum=apache.rocketmq.v1.ConsumeMessageType" json:"consume_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ConsumerData) Reset()         { *m = ConsumerData{} }
func (m *ConsumerData) String() string { return proto.CompactTextString(m) }
func (*ConsumerData) ProtoMessage()    {}
func (*ConsumerData) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{4}
}

func (m *ConsumerData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumerData.Unmarshal(m, b)
}
func (m *ConsumerData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumerData.Marshal(b, m, deterministic)
}
func (m *ConsumerData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerData.Merge(m, src)
}
func (m *ConsumerData) XXX_Size() int {
	return xxx_messageInfo_ConsumerData.Size(m)
}
func (m *ConsumerData) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerData.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerData proto.InternalMessageInfo

func (m *ConsumerData) GetGroup() *Resource {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *ConsumerData) GetSubscriptions() []*SubscriptionEntry {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (m *ConsumerData) GetConsumeModel() ConsumeModel {
	if m != nil {
		return m.ConsumeModel
	}
	return ConsumeModel_CLUSTERING
}

func (m *ConsumerData) GetConsumePolicy() ConsumePolicy {
	if m != nil {
		return m.ConsumePolicy
	}
	return ConsumePolicy_RESUME
}

func (m *ConsumerData) GetDeadLetterPolicy() *DeadLetterPolicy {
	if m != nil {
		return m.DeadLetterPolicy
	}
	return nil
}

func (m *ConsumerData) GetConsumeType() ConsumeMessageType {
	if m != nil {
		return m.ConsumeType
	}
	return ConsumeMessageType_ACTIVE
}

type SubscriptionEntry struct {
	Topic                *Resource         `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Expression           *FilterExpression `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SubscriptionEntry) Reset()         { *m = SubscriptionEntry{} }
func (m *SubscriptionEntry) String() string { return proto.CompactTextString(m) }
func (*SubscriptionEntry) ProtoMessage()    {}
func (*SubscriptionEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{5}
}

func (m *SubscriptionEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionEntry.Unmarshal(m, b)
}
func (m *SubscriptionEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionEntry.Marshal(b, m, deterministic)
}
func (m *SubscriptionEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionEntry.Merge(m, src)
}
func (m *SubscriptionEntry) XXX_Size() int {
	return xxx_messageInfo_SubscriptionEntry.Size(m)
}
func (m *SubscriptionEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionEntry.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionEntry proto.InternalMessageInfo

func (m *SubscriptionEntry) GetTopic() *Resource {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *SubscriptionEntry) GetExpression() *FilterExpression {
	if m != nil {
		return m.Expression
	}
	return nil
}

type Address struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{6}
}

func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Address) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type Endpoints struct {
	Scheme               AddressScheme `protobuf:"varint,1,opt,name=scheme,proto3,enum=apache.rocketmq.v1.AddressScheme" json:"scheme,omitempty"`
	Addresses            []*Address    `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Endpoints) Reset()         { *m = Endpoints{} }
func (m *Endpoints) String() string { return proto.CompactTextString(m) }
func (*Endpoints) ProtoMessage()    {}
func (*Endpoints) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{7}
}

func (m *Endpoints) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Endpoints.Unmarshal(m, b)
}
func (m *Endpoints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Endpoints.Marshal(b, m, deterministic)
}
func (m *Endpoints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Endpoints.Merge(m, src)
}
func (m *Endpoints) XXX_Size() int {
	return xxx_messageInfo_Endpoints.Size(m)
}
func (m *Endpoints) XXX_DiscardUnknown() {
	xxx_messageInfo_Endpoints.DiscardUnknown(m)
}

var xxx_messageInfo_Endpoints proto.InternalMessageInfo

func (m *Endpoints) GetScheme() AddressScheme {
	if m != nil {
		return m.Scheme
	}
	return AddressScheme_IPv4
}

func (m *Endpoints) GetAddresses() []*Address {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type Broker struct {
	// Name of the broker
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Broker index. Canonically, index = 0 implies that the broker is playing
	// leader role while brokers with index > 0 play follower role.
	Id int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// Address of the broker, complying with the following scheme
	// 1. dns:[//authority/]host[:port]
	// 2. ipv4:address[:port][,address[:port],...] – IPv4 addresses
	// 3. ipv6:address[:port][,address[:port],...] – IPv6 addresses
	Endpoints            *Endpoints `protobuf:"bytes,3,opt,name=endpoints,proto3" json:"endpoints,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Broker) Reset()         { *m = Broker{} }
func (m *Broker) String() string { return proto.CompactTextString(m) }
func (*Broker) ProtoMessage()    {}
func (*Broker) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{8}
}

func (m *Broker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Broker.Unmarshal(m, b)
}
func (m *Broker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Broker.Marshal(b, m, deterministic)
}
func (m *Broker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Broker.Merge(m, src)
}
func (m *Broker) XXX_Size() int {
	return xxx_messageInfo_Broker.Size(m)
}
func (m *Broker) XXX_DiscardUnknown() {
	xxx_messageInfo_Broker.DiscardUnknown(m)
}

var xxx_messageInfo_Broker proto.InternalMessageInfo

func (m *Broker) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Broker) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Broker) GetEndpoints() *Endpoints {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

type Partition struct {
	Topic                *Resource  `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Id                   int32      `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Permission           Permission `protobuf:"varint,3,opt,name=permission,proto3,enum=apache.rocketmq.v1.Permission" json:"permission,omitempty"`
	Broker               *Broker    `protobuf:"bytes,4,opt,name=broker,proto3" json:"broker,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Partition) Reset()         { *m = Partition{} }
func (m *Partition) String() string { return proto.CompactTextString(m) }
func (*Partition) ProtoMessage()    {}
func (*Partition) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{9}
}

func (m *Partition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Partition.Unmarshal(m, b)
}
func (m *Partition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Partition.Marshal(b, m, deterministic)
}
func (m *Partition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Partition.Merge(m, src)
}
func (m *Partition) XXX_Size() int {
	return xxx_messageInfo_Partition.Size(m)
}
func (m *Partition) XXX_DiscardUnknown() {
	xxx_messageInfo_Partition.DiscardUnknown(m)
}

var xxx_messageInfo_Partition proto.InternalMessageInfo

func (m *Partition) GetTopic() *Resource {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *Partition) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Partition) GetPermission() Permission {
	if m != nil {
		return m.Permission
	}
	return Permission_NONE
}

func (m *Partition) GetBroker() *Broker {
	if m != nil {
		return m.Broker
	}
	return nil
}

// When publishing messages to or subscribing messages from brokers, clients
// shall include or validate digests of message body to ensure data integrity.
//
// For message publishment, when an invalid digest were detected, brokers need
// respond client with BAD_REQUEST.
//
// For messags subscription, when an invalid digest were detected, consumers
// need to handle this case according to message type:
// 1) Standard messages should be negatively acknowledged instantly, causing
// immediate re-delivery; 2) FIFO messages require special RPC, to re-fetch
// previously acquired messages batch;
//
// Message consumption model also affects how invalid digest are handled. When
// messages are consumed in broadcasting way,
// TODO: define semantics of invalid-digest-when-broadcasting.
type Digest struct {
	Type                 DigestType `protobuf:"varint,1,opt,name=type,proto3,enum=apache.rocketmq.v1.DigestType" json:"type,omitempty"`
	Checksum             string     `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Digest) Reset()         { *m = Digest{} }
func (m *Digest) String() string { return proto.CompactTextString(m) }
func (*Digest) ProtoMessage()    {}
func (*Digest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{10}
}

func (m *Digest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Digest.Unmarshal(m, b)
}
func (m *Digest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Digest.Marshal(b, m, deterministic)
}
func (m *Digest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Digest.Merge(m, src)
}
func (m *Digest) XXX_Size() int {
	return xxx_messageInfo_Digest.Size(m)
}
func (m *Digest) XXX_DiscardUnknown() {
	xxx_messageInfo_Digest.DiscardUnknown(m)
}

var xxx_messageInfo_Digest proto.InternalMessageInfo

func (m *Digest) GetType() DigestType {
	if m != nil {
		return m.Type
	}
	return DigestType_CRC32
}

func (m *Digest) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

type SystemAttribute struct {
	// Tag
	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// Message keys
	Keys []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	// Message identifier, client-side generated, remains unique.
	// if message_id is empty, the send message request will be aborted with
	// status `INVALID_ARGUMENT`
	MessageId string `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Message body digest
	BodyDigest *Digest `protobuf:"bytes,4,opt,name=body_digest,json=bodyDigest,proto3" json:"body_digest,omitempty"`
	// Message body encoding. Candidate options are identity, gzip, snappy etc.
	BodyEncoding Encoding `protobuf:"varint,5,opt,name=body_encoding,json=bodyEncoding,proto3,enum=apache.rocketmq.v1.Encoding" json:"body_encoding,omitempty"`
	// Message type, normal, FIFO or transactional.
	MessageType MessageType `protobuf:"varint,6,opt,name=message_type,json=messageType,proto3,enum=apache.rocketmq.v1.MessageType" json:"message_type,omitempty"`
	// Message born time-point.
	BornTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=born_timestamp,json=bornTimestamp,proto3" json:"born_timestamp,omitempty"`
	// Message born host. Valid options are IPv4, IPv6 or client host domain name.
	BornHost string `protobuf:"bytes,8,opt,name=born_host,json=bornHost,proto3" json:"born_host,omitempty"`
	// Time-point at which the message is stored in the broker.
	StoreTimestamp *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=store_timestamp,json=storeTimestamp,proto3" json:"store_timestamp,omitempty"`
	// The broker that stores this message. It may be name, IP or arbitrary
	// identifier that uniquely identify the broker.
	StoreHost string `protobuf:"bytes,10,opt,name=store_host,json=storeHost,proto3" json:"store_host,omitempty"`
	// Types that are valid to be assigned to TimedDelivery:
	//	*SystemAttribute_DeliveryTimestamp
	//	*SystemAttribute_DelayLevel
	TimedDelivery isSystemAttribute_TimedDelivery `protobuf_oneof:"timed_delivery"`
	// If a message is acquired by way of POP, this field holds the receipt.
	// Clients use the receipt to acknowledge or negatively acknowledge the
	// message.
	ReceiptHandle string `protobuf:"bytes,13,opt,name=receipt_handle,json=receiptHandle,proto3" json:"receipt_handle,omitempty"`
	// Partition identifier in which a message is physically stored.
	PartitionId int32 `protobuf:"varint,14,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	// Partition offset at which a message is stored.
	PartitionOffset int64 `protobuf:"varint,15,opt,name=partition_offset,json=partitionOffset,proto3" json:"partition_offset,omitempty"`
	// Period of time servers would remain invisible once a message is acquired.
	InvisiblePeriod *durationpb.Duration `protobuf:"bytes,16,opt,name=invisible_period,json=invisiblePeriod,proto3" json:"invisible_period,omitempty"`
	// Business code may failed to process messages for the moment. Hence, clients
	// may request servers to deliver them again using certain back-off strategy,
	// the attempt is 1 not 0 if message is delivered first time.
	DeliveryAttempt int32 `protobuf:"varint,17,opt,name=delivery_attempt,json=deliveryAttempt,proto3" json:"delivery_attempt,omitempty"`
	// Message producer load-balance group if applicable.
	ProducerGroup *Resource `protobuf:"bytes,18,opt,name=producer_group,json=producerGroup,proto3" json:"producer_group,omitempty"`
	MessageGroup  string    `protobuf:"bytes,19,opt,name=message_group,json=messageGroup,proto3" json:"message_group,omitempty"`
	// Trace context.
	TraceContext string `protobuf:"bytes,20,opt,name=trace_context,json=traceContext,proto3" json:"trace_context,omitempty"`
	// Delay time of first recover orphaned transaction request from server.
	OrphanedTransactionRecoveryPeriod *durationpb.Duration `protobuf:"bytes,21,opt,name=orphaned_transaction_recovery_period,json=orphanedTransactionRecoveryPeriod,proto3" json:"orphaned_transaction_recovery_period,omitempty"`
	XXX_NoUnkeyedLiteral              struct{}             `json:"-"`
	XXX_unrecognized                  []byte               `json:"-"`
	XXX_sizecache                     int32                `json:"-"`
}

func (m *SystemAttribute) Reset()         { *m = SystemAttribute{} }
func (m *SystemAttribute) String() string { return proto.CompactTextString(m) }
func (*SystemAttribute) ProtoMessage()    {}
func (*SystemAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{11}
}

func (m *SystemAttribute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemAttribute.Unmarshal(m, b)
}
func (m *SystemAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemAttribute.Marshal(b, m, deterministic)
}
func (m *SystemAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemAttribute.Merge(m, src)
}
func (m *SystemAttribute) XXX_Size() int {
	return xxx_messageInfo_SystemAttribute.Size(m)
}
func (m *SystemAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_SystemAttribute proto.InternalMessageInfo

func (m *SystemAttribute) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *SystemAttribute) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *SystemAttribute) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *SystemAttribute) GetBodyDigest() *Digest {
	if m != nil {
		return m.BodyDigest
	}
	return nil
}

func (m *SystemAttribute) GetBodyEncoding() Encoding {
	if m != nil {
		return m.BodyEncoding
	}
	return Encoding_IDENTITY
}

func (m *SystemAttribute) GetMessageType() MessageType {
	if m != nil {
		return m.MessageType
	}
	return MessageType_NORMAL
}

func (m *SystemAttribute) GetBornTimestamp() *timestamppb.Timestamp {
	if m != nil {
		return m.BornTimestamp
	}
	return nil
}

func (m *SystemAttribute) GetBornHost() string {
	if m != nil {
		return m.BornHost
	}
	return ""
}

func (m *SystemAttribute) GetStoreTimestamp() *timestamppb.Timestamp {
	if m != nil {
		return m.StoreTimestamp
	}
	return nil
}

func (m *SystemAttribute) GetStoreHost() string {
	if m != nil {
		return m.StoreHost
	}
	return ""
}

type isSystemAttribute_TimedDelivery interface {
	isSystemAttribute_TimedDelivery()
}

type SystemAttribute_DeliveryTimestamp struct {
	DeliveryTimestamp *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=delivery_timestamp,json=deliveryTimestamp,proto3,oneof"`
}

type SystemAttribute_DelayLevel struct {
	DelayLevel int32 `protobuf:"varint,12,opt,name=delay_level,json=delayLevel,proto3,oneof"`
}

func (*SystemAttribute_DeliveryTimestamp) isSystemAttribute_TimedDelivery() {}

func (*SystemAttribute_DelayLevel) isSystemAttribute_TimedDelivery() {}

func (m *SystemAttribute) GetTimedDelivery() isSystemAttribute_TimedDelivery {
	if m != nil {
		return m.TimedDelivery
	}
	return nil
}

func (m *SystemAttribute) GetDeliveryTimestamp() *timestamppb.Timestamp {
	if x, ok := m.GetTimedDelivery().(*SystemAttribute_DeliveryTimestamp); ok {
		return x.DeliveryTimestamp
	}
	return nil
}

func (m *SystemAttribute) GetDelayLevel() int32 {
	if x, ok := m.GetTimedDelivery().(*SystemAttribute_DelayLevel); ok {
		return x.DelayLevel
	}
	return 0
}

func (m *SystemAttribute) GetReceiptHandle() string {
	if m != nil {
		return m.ReceiptHandle
	}
	return ""
}

func (m *SystemAttribute) GetPartitionId() int32 {
	if m != nil {
		return m.PartitionId
	}
	return 0
}

func (m *SystemAttribute) GetPartitionOffset() int64 {
	if m != nil {
		return m.PartitionOffset
	}
	return 0
}

func (m *SystemAttribute) GetInvisiblePeriod() *durationpb.Duration {
	if m != nil {
		return m.InvisiblePeriod
	}
	return nil
}

func (m *SystemAttribute) GetDeliveryAttempt() int32 {
	if m != nil {
		return m.DeliveryAttempt
	}
	return 0
}

func (m *SystemAttribute) GetProducerGroup() *Resource {
	if m != nil {
		return m.ProducerGroup
	}
	return nil
}

func (m *SystemAttribute) GetMessageGroup() string {
	if m != nil {
		return m.MessageGroup
	}
	return ""
}

func (m *SystemAttribute) GetTraceContext() string {
	if m != nil {
		return m.TraceContext
	}
	return ""
}

func (m *SystemAttribute) GetOrphanedTransactionRecoveryPeriod() *durationpb.Duration {
	if m != nil {
		return m.OrphanedTransactionRecoveryPeriod
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SystemAttribute) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SystemAttribute_DeliveryTimestamp)(nil),
		(*SystemAttribute_DelayLevel)(nil),
	}
}

type Message struct {
	Topic *Resource `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// User defined key-value pairs.
	// If user_attribute contains the reserved keys by RocketMQ,
	// the send message request will be aborted with status `INVALID_ARGUMENT`.
	// See below links for the reserved keys
	// https://github.com/apache/rocketmq/blob/master/common/src/main/java/org/apache/rocketmq/common/message/MessageConst.java#L58
	UserAttribute        map[string]string `protobuf:"bytes,2,rep,name=user_attribute,json=userAttribute,proto3" json:"user_attribute,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SystemAttribute      *SystemAttribute  `protobuf:"bytes,3,opt,name=system_attribute,json=systemAttribute,proto3" json:"system_attribute,omitempty"`
	Body                 []byte            `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{12}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetTopic() *Resource {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *Message) GetUserAttribute() map[string]string {
	if m != nil {
		return m.UserAttribute
	}
	return nil
}

func (m *Message) GetSystemAttribute() *SystemAttribute {
	if m != nil {
		return m.SystemAttribute
	}
	return nil
}

func (m *Message) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type Assignment struct {
	Partition            *Partition `protobuf:"bytes,1,opt,name=Partition,proto3" json:"Partition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Assignment) Reset()         { *m = Assignment{} }
func (m *Assignment) String() string { return proto.CompactTextString(m) }
func (*Assignment) ProtoMessage()    {}
func (*Assignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88b04e3f5e433a6, []int{13}
}

func (m *Assignment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Assignment.Unmarshal(m, b)
}
func (m *Assignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Assignment.Marshal(b, m, deterministic)
}
func (m *Assignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Assignment.Merge(m, src)
}
func (m *Assignment) XXX_Size() int {
	return xxx_messageInfo_Assignment.Size(m)
}
func (m *Assignment) XXX_DiscardUnknown() {
	xxx_messageInfo_Assignment.DiscardUnknown(m)
}

var xxx_messageInfo_Assignment proto.InternalMessageInfo

func (m *Assignment) GetPartition() *Partition {
	if m != nil {
		return m.Partition
	}
	return nil
}

func init() {
	proto.RegisterEnum("apache.rocketmq.v1.Permission", Permission_name, Permission_value)
	proto.RegisterEnum("apache.rocketmq.v1.FilterType", FilterType_name, FilterType_value)
	proto.RegisterEnum("apache.rocketmq.v1.ConsumeModel", ConsumeModel_name, ConsumeModel_value)
	proto.RegisterEnum("apache.rocketmq.v1.ConsumePolicy", ConsumePolicy_name, ConsumePolicy_value)
	proto.RegisterEnum("apache.rocketmq.v1.ConsumeMessageType", ConsumeMessageType_name, ConsumeMessageType_value)
	proto.RegisterEnum("apache.rocketmq.v1.AddressScheme", AddressScheme_name, AddressScheme_value)
	proto.RegisterEnum("apache.rocketmq.v1.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("apache.rocketmq.v1.DigestType", DigestType_name, DigestType_value)
	proto.RegisterEnum("apache.rocketmq.v1.Encoding", Encoding_name, Encoding_value)
	proto.RegisterEnum("apache.rocketmq.v1.QueryOffsetPolicy", QueryOffsetPolicy_name, QueryOffsetPolicy_value)
	proto.RegisterType((*FilterExpression)(nil), "apache.rocketmq.v1.FilterExpression")
	proto.RegisterType((*DeadLetterPolicy)(nil), "apache.rocketmq.v1.DeadLetterPolicy")
	proto.RegisterType((*Resource)(nil), "apache.rocketmq.v1.Resource")
	proto.RegisterType((*ProducerData)(nil), "apache.rocketmq.v1.ProducerData")
	proto.RegisterType((*ConsumerData)(nil), "apache.rocketmq.v1.ConsumerData")
	proto.RegisterType((*SubscriptionEntry)(nil), "apache.rocketmq.v1.SubscriptionEntry")
	proto.RegisterType((*Address)(nil), "apache.rocketmq.v1.Address")
	proto.RegisterType((*Endpoints)(nil), "apache.rocketmq.v1.Endpoints")
	proto.RegisterType((*Broker)(nil), "apache.rocketmq.v1.Broker")
	proto.RegisterType((*Partition)(nil), "apache.rocketmq.v1.Partition")
	proto.RegisterType((*Digest)(nil), "apache.rocketmq.v1.Digest")
	proto.RegisterType((*SystemAttribute)(nil), "apache.rocketmq.v1.SystemAttribute")
	proto.RegisterType((*Message)(nil), "apache.rocketmq.v1.Message")
	proto.RegisterMapType((map[string]string)(nil), "apache.rocketmq.v1.Message.UserAttributeEntry")
	proto.RegisterType((*Assignment)(nil), "apache.rocketmq.v1.Assignment")
}

func init() {
	proto.RegisterFile("apache/rocketmq/v1/definition.proto", fileDescriptor_e88b04e3f5e433a6)
}

var fileDescriptor_e88b04e3f5e433a6 = []byte{
	// 1622 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xdb, 0x6e, 0xdb, 0xc8,
	0x19, 0x0e, 0x25, 0xd9, 0x96, 0x7e, 0x1d, 0x4c, 0xcf, 0x66, 0x0b, 0xd5, 0xdb, 0x64, 0x1d, 0x25,
	0x5b, 0xb8, 0x01, 0x2a, 0x37, 0x4a, 0xbb, 0xed, 0xee, 0x02, 0x45, 0x28, 0x91, 0xb1, 0xe9, 0xe8,
	0x94, 0x11, 0xd3, 0x22, 0xbd, 0x28, 0x41, 0x91, 0x13, 0x99, 0xb5, 0x78, 0x28, 0x39, 0x12, 0xac,
	0x27, 0xe8, 0x03, 0xf4, 0x05, 0x7a, 0xdd, 0xa7, 0xe8, 0x4d, 0x51, 0xf4, 0x0d, 0xfa, 0x38, 0xc5,
	0x1c, 0x48, 0xc9, 0xb2, 0xd6, 0x09, 0x72, 0x37, 0xf3, 0xf3, 0xfb, 0x0f, 0xf3, 0x9f, 0x09, 0x4f,
	0x9d, 0xd8, 0x71, 0xaf, 0xc8, 0x59, 0x12, 0xb9, 0xd7, 0x84, 0x06, 0x7f, 0x3d, 0x5b, 0xbe, 0x38,
	0xf3, 0xc8, 0x07, 0x3f, 0xf4, 0xa9, 0x1f, 0x85, 0xed, 0x38, 0x89, 0x68, 0x84, 0x90, 0x00, 0xb5,
	0x33, 0x50, 0x7b, 0xf9, 0xe2, 0xf8, 0xeb, 0x59, 0x14, 0xcd, 0xe6, 0xe4, 0x8c, 0x23, 0xa6, 0x8b,
	0x0f, 0x67, 0xd4, 0x0f, 0x48, 0x4a, 0x9d, 0x20, 0x16, 0x4c, 0xc7, 0x8f, 0xb7, 0x01, 0xde, 0x22,
	0x71, 0xd6, 0x42, 0x5b, 0x73, 0x50, 0x5f, 0xfb, 0x73, 0x4a, 0x12, 0xe3, 0x26, 0x4e, 0x48, 0x9a,
	0xfa, 0x51, 0x88, 0x3a, 0x50, 0xa2, 0xab, 0x98, 0x34, 0x95, 0x13, 0xe5, 0xb4, 0xd1, 0x79, 0xdc,
	0xbe, 0xab, 0xb7, 0x2d, 0x78, 0xac, 0x55, 0x4c, 0x30, 0xc7, 0xa2, 0xc7, 0x00, 0x24, 0x97, 0xd0,
	0x2c, 0x9c, 0x28, 0xa7, 0x15, 0xbc, 0x41, 0xb9, 0x2c, 0x95, 0x8b, 0xaa, 0xd6, 0xea, 0x83, 0xaa,
	0x13, 0xc7, 0xeb, 0x13, 0x4a, 0x49, 0x32, 0x8e, 0xe6, 0xbe, 0xbb, 0x42, 0x1d, 0xf8, 0x32, 0x70,
	0x6e, 0x6c, 0x8f, 0xcc, 0xfd, 0x25, 0x49, 0x56, 0xb6, 0x43, 0x29, 0x09, 0x62, 0x9a, 0x72, 0xf5,
	0x7b, 0xf8, 0x8b, 0xc0, 0xb9, 0xd1, 0xe5, 0x37, 0x4d, 0x7e, 0xba, 0x2c, 0x95, 0x0b, 0xaa, 0xd6,
	0x9a, 0x40, 0x19, 0x93, 0x34, 0x5a, 0x24, 0x2e, 0x41, 0xbf, 0x04, 0x94, 0xc8, 0xb3, 0x1d, 0x3a,
	0x01, 0x49, 0x63, 0xc7, 0x15, 0x2f, 0xa8, 0xe0, 0xa3, 0xec, 0xcb, 0x30, 0xfb, 0x80, 0x10, 0x94,
	0x18, 0x4a, 0x1a, 0xca, 0xcf, 0xd2, 0xc4, 0x0b, 0xa8, 0x8d, 0x93, 0xc8, 0x5b, 0xb8, 0x24, 0xd1,
	0x1d, 0xea, 0xa0, 0x0e, 0xec, 0xcd, 0x92, 0x68, 0x11, 0x73, 0x59, 0xd5, 0xce, 0xcf, 0x76, 0x79,
	0x23, 0xb3, 0x02, 0x0b, 0xa8, 0x34, 0xef, 0xdf, 0x45, 0xa8, 0xf5, 0xa2, 0x30, 0x5d, 0x04, 0x9f,
	0x2f, 0x0a, 0xbd, 0x81, 0x7a, 0xba, 0x98, 0xa6, 0x6e, 0xe2, 0xc7, 0x2c, 0x6a, 0x69, 0xb3, 0x70,
	0x52, 0x3c, 0xad, 0x76, 0xbe, 0xd9, 0xc5, 0x3b, 0xd9, 0x00, 0x1a, 0x21, 0x4d, 0x56, 0xf8, 0x36,
	0x2f, 0x32, 0xa0, 0xee, 0x0a, 0x83, 0xec, 0x20, 0xf2, 0xc8, 0xbc, 0x59, 0xe4, 0x11, 0x3e, 0xd9,
	0x25, 0x4c, 0x5a, 0x3e, 0x60, 0x38, 0x5c, 0x73, 0x37, 0x6e, 0xe8, 0x02, 0x1a, 0x99, 0x98, 0x98,
	0xc7, 0xb0, 0x59, 0xe2, 0x72, 0x9e, 0xdc, 0x23, 0x47, 0x04, 0x1b, 0x67, 0xfa, 0x65, 0xec, 0x31,
	0x20, 0x8f, 0x38, 0x9e, 0x3d, 0xe7, 0x09, 0x91, 0x49, 0xdb, 0xe3, 0xee, 0x79, 0xb6, 0x4b, 0xda,
	0x76, 0xf6, 0x60, 0xd5, 0xdb, 0xce, 0x27, 0x13, 0x32, 0x6b, 0x6d, 0x9e, 0xc5, 0xfb, 0xdc, 0xb6,
	0x9f, 0xdf, 0xf7, 0x46, 0x92, 0xa6, 0xce, 0x8c, 0xf0, 0x6c, 0xae, 0x4a, 0x5e, 0x76, 0xb9, 0x2c,
	0x95, 0x0f, 0x54, 0xad, 0xf5, 0x77, 0x05, 0x8e, 0xee, 0xb8, 0x96, 0x05, 0x93, 0x46, 0xb1, 0xef,
	0x7e, 0x5a, 0x30, 0x39, 0x14, 0xe9, 0x77, 0x8a, 0xe4, 0x47, 0x9e, 0xb9, 0x5d, 0x92, 0x3b, 0x4a,
	0xe9, 0xb7, 0x70, 0xa0, 0x79, 0x1e, 0xa3, 0xb1, 0x64, 0xbe, 0x8a, 0x52, 0x2a, 0xb3, 0x9d, 0x9f,
	0x19, 0x2d, 0x8e, 0x12, 0xca, 0x95, 0xec, 0x61, 0x7e, 0x96, 0x8c, 0x7f, 0x53, 0xa0, 0x62, 0x84,
	0x5e, 0x1c, 0xf9, 0x21, 0x4d, 0xd1, 0x77, 0xb0, 0x9f, 0xba, 0x57, 0x24, 0xc8, 0xaa, 0x7d, 0x67,
	0x0c, 0xa5, 0xa2, 0x09, 0x07, 0x62, 0xc9, 0x80, 0xbe, 0x83, 0x8a, 0x23, 0x3e, 0x90, 0x2c, 0x2d,
	0xbf, 0xba, 0x87, 0x1b, 0xaf, 0xd1, 0xd2, 0x92, 0x08, 0xf6, 0xbb, 0x49, 0x74, 0x4d, 0x92, 0xbc,
	0x1c, 0x95, 0x75, 0x39, 0xa2, 0x06, 0x14, 0x7c, 0x4f, 0xda, 0x5f, 0xf0, 0x3d, 0xf4, 0x03, 0x54,
	0x48, 0x66, 0x36, 0x4f, 0xdc, 0x6a, 0xe7, 0xd1, 0x2e, 0x75, 0xf9, 0xdb, 0xf0, 0x1a, 0x7f, 0x59,
	0x2a, 0x97, 0x54, 0xad, 0xf5, 0x5f, 0x05, 0x2a, 0x63, 0x27, 0xa1, 0xbc, 0xab, 0x7e, 0x56, 0x04,
	0xb7, 0x8d, 0xfa, 0x3d, 0x40, 0x4c, 0x92, 0xc0, 0x17, 0x11, 0x2d, 0xfe, 0x78, 0xc3, 0x1c, 0xe7,
	0x28, 0xbc, 0xc1, 0x81, 0x3a, 0xb0, 0x3f, 0xe5, 0x2e, 0xe0, 0x25, 0x54, 0xed, 0x1c, 0xef, 0xe2,
	0x15, 0x4e, 0xc2, 0x12, 0x79, 0x59, 0x2a, 0xef, 0xa9, 0x5a, 0xeb, 0xcf, 0xb0, 0xaf, 0xfb, 0x33,
	0x92, 0xd2, 0x4f, 0x69, 0xd7, 0x02, 0xb9, 0xd1, 0xae, 0x8f, 0xa1, 0xec, 0x5e, 0x11, 0xf7, 0x3a,
	0x5d, 0x04, 0xb2, 0x07, 0xe6, 0x77, 0x19, 0x9c, 0xff, 0x94, 0xe1, 0x70, 0xb2, 0x4a, 0x29, 0x09,
	0x34, 0x4a, 0x13, 0x7f, 0xba, 0xa0, 0x04, 0xa9, 0x50, 0xa4, 0xce, 0x4c, 0x46, 0x89, 0x1d, 0x59,
	0xe0, 0xae, 0xc9, 0x4a, 0x84, 0xbf, 0x82, 0xf9, 0x19, 0x3d, 0x02, 0x08, 0x44, 0x45, 0xd9, 0xbe,
	0xc7, 0x7d, 0x52, 0xc1, 0x15, 0x49, 0x31, 0x59, 0x1c, 0xab, 0xd3, 0xc8, 0x5b, 0xd9, 0x1e, 0xb7,
	0xe9, 0xbe, 0x77, 0x0b, 0xab, 0x31, 0x30, 0xb8, 0x7c, 0xab, 0x06, 0x75, 0xce, 0x4c, 0x42, 0x37,
	0xf2, 0xfc, 0x70, 0xc6, 0x7b, 0x45, 0x63, 0x77, 0xec, 0x0c, 0x89, 0xc1, 0x35, 0xc6, 0x92, 0xdd,
	0x50, 0x17, 0x6a, 0x99, 0x79, 0x1b, 0xfd, 0xe1, 0xeb, 0x5d, 0x12, 0x6e, 0x35, 0x86, 0x60, 0x7d,
	0x41, 0x1a, 0x34, 0xa6, 0x51, 0x12, 0xda, 0xf9, 0xb4, 0x6d, 0x1e, 0xc8, 0x67, 0x88, 0x71, 0xdb,
	0xce, 0xc6, 0x6d, 0xdb, 0xca, 0x10, 0xb8, 0xce, 0x38, 0xf2, 0x2b, 0xfa, 0x0a, 0x2a, 0x5c, 0x04,
	0xaf, 0xdc, 0xb2, 0x08, 0x01, 0x23, 0x5c, 0xb0, 0xea, 0xed, 0xc1, 0x61, 0x4a, 0xa3, 0x84, 0x6c,
	0x28, 0xa8, 0x7c, 0x54, 0x41, 0x83, 0xb3, 0xac, 0x35, 0x3c, 0x02, 0x10, 0x42, 0xb8, 0x0a, 0x10,
	0x71, 0xe0, 0x14, 0xae, 0xe3, 0x0d, 0xeb, 0xbd, 0x72, 0xe6, 0xae, 0xd5, 0x54, 0x3f, 0xa6, 0xe6,
	0xe2, 0x01, 0x3e, 0xca, 0xf8, 0xd6, 0xba, 0x9e, 0x40, 0xd5, 0x23, 0x73, 0x67, 0x65, 0xcf, 0xc9,
	0x92, 0xcc, 0x9b, 0x35, 0x56, 0x20, 0x17, 0x0f, 0x30, 0x70, 0x62, 0x9f, 0xd1, 0xd0, 0x37, 0xd0,
	0x48, 0x88, 0x4b, 0xfc, 0x98, 0xda, 0x57, 0x4e, 0xe8, 0xcd, 0x49, 0xb3, 0xce, 0x4d, 0xaa, 0x4b,
	0xea, 0x05, 0x27, 0xa2, 0x27, 0x50, 0x8b, 0xb3, 0x12, 0x65, 0xf9, 0xd3, 0xe0, 0xb5, 0x56, 0xcd,
	0x69, 0xa6, 0x87, 0x7e, 0x01, 0xea, 0x1a, 0x12, 0x7d, 0xf8, 0x90, 0x12, 0xda, 0x3c, 0x3c, 0x51,
	0x4e, 0x8b, 0xf8, 0x30, 0xa7, 0x8f, 0x38, 0x19, 0xe9, 0xa0, 0xfa, 0xe1, 0xd2, 0x4f, 0xfd, 0xe9,
	0x9c, 0xd8, 0x31, 0x49, 0xfc, 0xc8, 0x6b, 0xaa, 0xfc, 0x89, 0x3f, 0xbd, 0xf3, 0x44, 0x5d, 0x6e,
	0x46, 0xf8, 0x30, 0x67, 0x19, 0x73, 0x0e, 0xa6, 0x70, 0x7b, 0x3d, 0x69, 0x1e, 0x71, 0xbb, 0x0e,
	0xbd, 0xdb, 0xab, 0x09, 0xea, 0x41, 0x23, 0x96, 0xeb, 0x83, 0x2d, 0x86, 0x3d, 0xfa, 0x84, 0xee,
	0x52, 0xcf, 0x78, 0xce, 0xf9, 0xd0, 0x7f, 0x0a, 0xf5, 0x2c, 0x45, 0x85, 0x8c, 0x2f, 0xb8, 0xa7,
	0xb2, 0xbc, 0xcd, 0x41, 0x34, 0x71, 0x5c, 0x62, 0xbb, 0x51, 0x48, 0xc9, 0x0d, 0x6d, 0x3e, 0x14,
	0x20, 0x4e, 0xec, 0x09, 0x1a, 0xfa, 0x0b, 0x3c, 0x8b, 0x92, 0xf8, 0xca, 0x09, 0x89, 0x67, 0xd3,
	0xc4, 0x09, 0x53, 0xc7, 0xe5, 0x5e, 0x4b, 0x88, 0x1b, 0xf1, 0xe7, 0x48, 0x9f, 0x7c, 0xf9, 0x31,
	0x9f, 0x3c, 0xc9, 0xc4, 0x58, 0x6b, 0x29, 0x58, 0x0a, 0x11, 0x5e, 0xea, 0xaa, 0xd0, 0x60, 0x79,
	0xe4, 0xe5, 0xab, 0xdc, 0x65, 0xa9, 0xfc, 0x13, 0x55, 0x6b, 0xfd, 0xab, 0x00, 0x07, 0xb2, 0x92,
	0x3e, 0xab, 0xe7, 0xbe, 0x83, 0xc6, 0x22, 0x25, 0x09, 0xf3, 0xbc, 0xe8, 0x43, 0x72, 0xd8, 0xb4,
	0xef, 0x29, 0xd9, 0xf6, 0xbb, 0x94, 0x24, 0x79, 0xe3, 0x92, 0xcb, 0xd0, 0x62, 0x93, 0x86, 0x86,
	0xa0, 0xa6, 0xbc, 0xbf, 0x6d, 0x08, 0x16, 0x63, 0xe5, 0xe9, 0xce, 0xe5, 0xea, 0x76, 0x2f, 0xc4,
	0x87, 0xe9, 0x56, 0x73, 0x44, 0x50, 0x62, 0x7d, 0x86, 0x37, 0xb4, 0x1a, 0xe6, 0xe7, 0xe3, 0x57,
	0x80, 0xee, 0x1a, 0xc2, 0xda, 0xe8, 0x35, 0x59, 0x65, 0x6d, 0xf4, 0x9a, 0xac, 0xd0, 0x43, 0xd8,
	0x5b, 0x3a, 0xf3, 0x45, 0xb6, 0x8f, 0x8a, 0xcb, 0xf7, 0x85, 0xdf, 0x29, 0xb2, 0xd9, 0x8f, 0x00,
	0xb4, 0x34, 0xf5, 0x67, 0x61, 0x40, 0x42, 0xca, 0x26, 0x61, 0x3e, 0xc5, 0xa4, 0x23, 0x77, 0x4e,
	0xc2, 0x1c, 0x84, 0xd7, 0x78, 0xb1, 0x9b, 0x3e, 0xd7, 0x00, 0xd6, 0x13, 0x09, 0x95, 0xa1, 0x34,
	0x1c, 0x0d, 0x0d, 0xf5, 0x01, 0x3b, 0x61, 0x43, 0xd3, 0x55, 0x05, 0x55, 0x60, 0xef, 0x8f, 0xd8,
	0xb4, 0x0c, 0xb5, 0x80, 0x1a, 0x00, 0x8c, 0x68, 0x8b, 0x7b, 0xb1, 0xc5, 0x86, 0xe9, 0xab, 0xe7,
	0xcf, 0x00, 0xd6, 0x7f, 0x01, 0xe8, 0x00, 0x8a, 0x96, 0x76, 0xae, 0x3e, 0x60, 0x87, 0xc9, 0xdb,
	0xbe, 0xaa, 0xb4, 0x98, 0xa2, 0x57, 0xcf, 0xbf, 0xcd, 0x77, 0x60, 0xb1, 0x3b, 0x36, 0x00, 0x7a,
	0xfd, 0x77, 0x13, 0xcb, 0xc0, 0xe6, 0x90, 0xc1, 0x55, 0xa8, 0x75, 0xf1, 0x48, 0xd3, 0x7b, 0xda,
	0xc4, 0x62, 0x94, 0x8c, 0x0f, 0x43, 0xfd, 0xd6, 0xe6, 0x88, 0x00, 0xf6, 0xb1, 0x31, 0x79, 0x37,
	0x60, 0x56, 0xd6, 0xa0, 0x3c, 0xee, 0x6b, 0xef, 0xbb, 0x5a, 0xef, 0x8d, 0xaa, 0xa0, 0x2a, 0x1c,
	0xe8, 0xe6, 0xa4, 0xa7, 0x61, 0x5d, 0x2d, 0xa0, 0x87, 0xa0, 0x5a, 0x1a, 0x3e, 0x37, 0x2c, 0xdb,
	0x32, 0x07, 0xc6, 0xc4, 0xd2, 0x06, 0xe3, 0xdc, 0xe2, 0x97, 0x80, 0xee, 0x6e, 0x7c, 0x4c, 0xb0,
	0xd6, 0xb3, 0xcc, 0x3f, 0x30, 0xc1, 0x55, 0x38, 0x18, 0x6b, 0x93, 0x09, 0xbb, 0x64, 0x86, 0x7c,
	0x0f, 0xf5, 0x5b, 0xeb, 0x0f, 0x73, 0x91, 0x39, 0x5e, 0xfe, 0x5a, 0x38, 0xcb, 0x1c, 0x2f, 0xbf,
	0x55, 0x15, 0x74, 0x08, 0x55, 0x7d, 0x34, 0xd0, 0xcc, 0xa1, 0x3d, 0xd4, 0x06, 0x86, 0x5a, 0x68,
	0xb1, 0x19, 0xfa, 0xea, 0xb9, 0x01, 0xd5, 0x2d, 0x4d, 0xc3, 0x11, 0x1e, 0x68, 0x7d, 0xc1, 0xfb,
	0xda, 0x7c, 0x3d, 0x12, 0x8e, 0xd6, 0x8d, 0xbe, 0xf6, 0x5e, 0x2d, 0x30, 0x31, 0x16, 0xd6, 0x86,
	0x13, 0x66, 0xcf, 0x68, 0x98, 0xdb, 0xfd, 0x2b, 0x80, 0xf5, 0x00, 0x67, 0xf8, 0x1e, 0xee, 0xbd,
	0xec, 0x08, 0x5f, 0x0f, 0xf4, 0xdf, 0xa8, 0x0a, 0x93, 0x36, 0xb9, 0xd0, 0x5e, 0xe4, 0x8a, 0x4f,
	0xa1, 0x9c, 0xcf, 0xbb, 0x1a, 0x94, 0x4d, 0xdd, 0x18, 0x5a, 0xa6, 0xf5, 0x5e, 0xe8, 0x3d, 0xff,
	0x93, 0x39, 0xce, 0x9f, 0xa7, 0xc1, 0xd1, 0xdb, 0x05, 0x49, 0x56, 0xa2, 0x5f, 0x4a, 0x5f, 0xd7,
	0xa1, 0xd2, 0x35, 0xce, 0xcd, 0xe1, 0x50, 0xc4, 0xe8, 0x00, 0x8a, 0xc6, 0x90, 0xe5, 0x44, 0x03,
	0x80, 0x79, 0xd5, 0x1e, 0x8f, 0xcc, 0xa1, 0x95, 0x29, 0xeb, 0xfe, 0x00, 0x3b, 0xfe, 0x4c, 0xbb,
	0xe5, 0xc1, 0x5b, 0x3d, 0x0a, 0x1c, 0x3f, 0x1c, 0x2b, 0xff, 0x50, 0x94, 0xff, 0x29, 0xca, 0x3f,
	0x0b, 0x3b, 0x60, 0xd3, 0x7d, 0xde, 0x6a, 0x5e, 0xfe, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x48,
	0x76, 0xa2, 0x02, 0x0f, 0x00, 0x00,
}
